
Lab00_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005388  08005388  00015388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054c0  080054c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080054c0  080054c0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054c0  080054c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054c0  080054c0  000154c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054c4  080054c4  000154c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080054c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ac8  20000074  0800553c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b3c  0800553c  00021b3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f7a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f00  00000000  00000000  0003601e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  00038f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  0003a2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b81  00000000  00000000  0003b4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141b8  00000000  00000000  0003f069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa595  00000000  00000000  00053221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014d7b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005680  00000000  00000000  0014d808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      000000df  00000000  00000000  00152e88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005370 	.word	0x08005370

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005370 	.word	0x08005370

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <led_init>:
// â€¢ When the I/O is LOW, the LED is off
#define LED_PORT GPIOA
#define LED_PIN 5

void led_init(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	// Configure LED_PIN as an output
    GPIOA->MODER &= ~(0x3<<(LED_PIN*2));    // first, clear the two MODE bits for this pin
 8000274:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800027e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000282:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=   0x1<<(LED_PIN*2);     // 0x1 means output
 8000284:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800028e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000292:	6013      	str	r3, [r2, #0]

    // ...and as push-pull drive
    GPIOA->OTYPER &= ~(0x1<<LED_PIN) ;
 8000294:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800029e:	f023 0320 	bic.w	r3, r3, #32
 80002a2:	6053      	str	r3, [r2, #4]

    // ...with medium speed
    GPIOA->OSPEEDR &= ~(0x3<<(LED_PIN*2));  // first, clear the two OSPEED bits for this pin
 80002a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a8:	689b      	ldr	r3, [r3, #8]
 80002aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002b2:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=   0x1<<(LED_PIN*2) ;  // 0x1 means medium speed
 80002b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002c2:	6093      	str	r3, [r2, #8]

    // Enable the clock to GPIO Port A
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;    // enable clock for the User LED, UART
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <led_init+0x6c>)
 80002c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c8:	4a04      	ldr	r2, [pc, #16]	; (80002dc <led_init+0x6c>)
 80002ca:	f043 0301 	orr.w	r3, r3, #1
 80002ce:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40021000 	.word	0x40021000

080002e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e4:	f000 fae3 	bl	80008ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e8:	f000 f838 	bl	800035c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_WWDG_Init();
 80002ec:	f000 f8a2 	bl	8000434 <MX_WWDG_Init>
  MX_TIM16_Init();
 80002f0:	f000 f87a 	bl	80003e8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
	//clock_init(); // Switch System Clock = 80 MHz
	led_init();
 80002f4:	f7ff ffbc 	bl	8000270 <led_init>
	USART2_Init(115200);	// initialize USART2
 80002f8:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80002fc:	f000 f9b0 	bl	8000660 <USART2_Init>
	n = sprintf((char *)buffer, "Hello World\r\n");
 8000300:	490e      	ldr	r1, [pc, #56]	; (800033c <main+0x5c>)
 8000302:	480f      	ldr	r0, [pc, #60]	; (8000340 <main+0x60>)
 8000304:	f004 fc6c 	bl	8004be0 <siprintf>
 8000308:	4603      	mov	r3, r0
 800030a:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <main+0x64>)
 800030c:	6013      	str	r3, [r2, #0]
	USART_Write(USART2, buffer, n);
 800030e:	4b0d      	ldr	r3, [pc, #52]	; (8000344 <main+0x64>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	461a      	mov	r2, r3
 8000314:	490a      	ldr	r1, [pc, #40]	; (8000340 <main+0x60>)
 8000316:	480c      	ldr	r0, [pc, #48]	; (8000348 <main+0x68>)
 8000318:	f000 fa6e 	bl	80007f8 <USART_Write>

	//start the timer
	HAL_TIM_Base_Start_IT(&htim16);
 800031c:	480b      	ldr	r0, [pc, #44]	; (800034c <main+0x6c>)
 800031e:	f001 fad1 	bl	80018c4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000322:	f001 fd97 	bl	8001e54 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000326:	4a0a      	ldr	r2, [pc, #40]	; (8000350 <main+0x70>)
 8000328:	2100      	movs	r1, #0
 800032a:	480a      	ldr	r0, [pc, #40]	; (8000354 <main+0x74>)
 800032c:	f001 fddc 	bl	8001ee8 <osThreadNew>
 8000330:	4603      	mov	r3, r0
 8000332:	4a09      	ldr	r2, [pc, #36]	; (8000358 <main+0x78>)
 8000334:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000336:	f001 fdb1 	bl	8001e9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800033a:	e7fe      	b.n	800033a <main+0x5a>
 800033c:	08005394 	.word	0x08005394
 8000340:	200000f4 	.word	0x200000f4
 8000344:	20000158 	.word	0x20000158
 8000348:	40004400 	.word	0x40004400
 800034c:	20000090 	.word	0x20000090
 8000350:	080053c8 	.word	0x080053c8
 8000354:	080004e9 	.word	0x080004e9
 8000358:	200000f0 	.word	0x200000f0

0800035c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b096      	sub	sp, #88	; 0x58
 8000360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000362:	f107 0314 	add.w	r3, r7, #20
 8000366:	2244      	movs	r2, #68	; 0x44
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f004 fb22 	bl	80049b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000370:	463b      	mov	r3, r7
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]
 800037c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800037e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000382:	f000 fc29 	bl	8000bd8 <HAL_PWREx_ControlVoltageScaling>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800038c:	f000 f8b4 	bl	80004f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000390:	2302      	movs	r3, #2
 8000392:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000398:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800039a:	2310      	movs	r3, #16
 800039c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800039e:	2300      	movs	r3, #0
 80003a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a2:	f107 0314 	add.w	r3, r7, #20
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fc6c 	bl	8000c84 <HAL_RCC_OscConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80003b2:	f000 f8a1 	bl	80004f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b6:	230f      	movs	r3, #15
 80003b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003ba:	2301      	movs	r3, #1
 80003bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003be:	2300      	movs	r3, #0
 80003c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ca:	463b      	mov	r3, r7
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f001 f834 	bl	800143c <HAL_RCC_ClockConfig>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003da:	f000 f88d 	bl	80004f8 <Error_Handler>
  }
}
 80003de:	bf00      	nop
 80003e0:	3758      	adds	r7, #88	; 0x58
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
	...

080003e8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <MX_TIM16_Init+0x44>)
 80003ee:	4a10      	ldr	r2, [pc, #64]	; (8000430 <MX_TIM16_Init+0x48>)
 80003f0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16000-1;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <MX_TIM16_Init+0x44>)
 80003f4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80003f8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003fa:	4b0c      	ldr	r3, [pc, #48]	; (800042c <MX_TIM16_Init+0x44>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 40 - 1;
 8000400:	4b0a      	ldr	r3, [pc, #40]	; (800042c <MX_TIM16_Init+0x44>)
 8000402:	2227      	movs	r2, #39	; 0x27
 8000404:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000406:	4b09      	ldr	r3, [pc, #36]	; (800042c <MX_TIM16_Init+0x44>)
 8000408:	2200      	movs	r2, #0
 800040a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800040c:	4b07      	ldr	r3, [pc, #28]	; (800042c <MX_TIM16_Init+0x44>)
 800040e:	2200      	movs	r2, #0
 8000410:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000412:	4b06      	ldr	r3, [pc, #24]	; (800042c <MX_TIM16_Init+0x44>)
 8000414:	2200      	movs	r2, #0
 8000416:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000418:	4804      	ldr	r0, [pc, #16]	; (800042c <MX_TIM16_Init+0x44>)
 800041a:	f001 f9fb 	bl	8001814 <HAL_TIM_Base_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000424:	f000 f868 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000090 	.word	0x20000090
 8000430:	40014400 	.word	0x40014400

08000434 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_WWDG_Init+0x38>)
 800043a:	4a0d      	ldr	r2, [pc, #52]	; (8000470 <MX_WWDG_Init+0x3c>)
 800043c:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_4;
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <MX_WWDG_Init+0x38>)
 8000440:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000444:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 127;
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <MX_WWDG_Init+0x38>)
 8000448:	227f      	movs	r2, #127	; 0x7f
 800044a:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 127;
 800044c:	4b07      	ldr	r3, [pc, #28]	; (800046c <MX_WWDG_Init+0x38>)
 800044e:	227f      	movs	r2, #127	; 0x7f
 8000450:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8000452:	4b06      	ldr	r3, [pc, #24]	; (800046c <MX_WWDG_Init+0x38>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8000458:	4804      	ldr	r0, [pc, #16]	; (800046c <MX_WWDG_Init+0x38>)
 800045a:	f001 fca3 	bl	8001da4 <HAL_WWDG_Init>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_WWDG_Init+0x34>
  {
    Error_Handler();
 8000464:	f000 f848 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	200000dc 	.word	0x200000dc
 8000470:	40002c00 	.word	0x40002c00

08000474 <WWDGService>:

/* USER CODE BEGIN 4 */

void WWDGService(WWDG_HandleTypeDef *hwwdg)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	68d2      	ldr	r2, [r2, #12]
 8000484:	601a      	str	r2, [r3, #0]

  return;
 8000486:	bf00      	nop
}
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
	...

08000494 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	n = sprintf((char *)buffer, "Interrupt\r\n");
 800049c:	490c      	ldr	r1, [pc, #48]	; (80004d0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800049e:	480d      	ldr	r0, [pc, #52]	; (80004d4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80004a0:	f004 fb9e 	bl	8004be0 <siprintf>
 80004a4:	4603      	mov	r3, r0
 80004a6:	4a0c      	ldr	r2, [pc, #48]	; (80004d8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80004a8:	6013      	str	r3, [r2, #0]
		USART_Write(USART2, buffer, n);
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	461a      	mov	r2, r3
 80004b0:	4908      	ldr	r1, [pc, #32]	; (80004d4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80004b2:	480a      	ldr	r0, [pc, #40]	; (80004dc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80004b4:	f000 f9a0 	bl	80007f8 <USART_Write>
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a09      	ldr	r2, [pc, #36]	; (80004e0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d102      	bne.n	80004c6 <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    WWDGService(&hwwdg);
 80004c0:	4808      	ldr	r0, [pc, #32]	; (80004e4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80004c2:	f7ff ffd7 	bl	8000474 <WWDGService>
  }
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	080053a4 	.word	0x080053a4
 80004d4:	200000f4 	.word	0x200000f4
 80004d8:	20000158 	.word	0x20000158
 80004dc:	40004400 	.word	0x40004400
 80004e0:	20000090 	.word	0x20000090
 80004e4:	200000dc 	.word	0x200000dc

080004e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f001 fd8b 	bl	800200c <osDelay>
 80004f6:	e7fb      	b.n	80004f0 <StartDefaultTask+0x8>

080004f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fc:	b672      	cpsid	i
}
 80004fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000500:	e7fe      	b.n	8000500 <Error_Handler+0x8>
	...

08000504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <HAL_MspInit+0x4c>)
 800050c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800050e:	4a10      	ldr	r2, [pc, #64]	; (8000550 <HAL_MspInit+0x4c>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6613      	str	r3, [r2, #96]	; 0x60
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <HAL_MspInit+0x4c>)
 8000518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_MspInit+0x4c>)
 8000524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000526:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <HAL_MspInit+0x4c>)
 8000528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052c:	6593      	str	r3, [r2, #88]	; 0x58
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <HAL_MspInit+0x4c>)
 8000530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	210f      	movs	r1, #15
 800053e:	f06f 0001 	mvn.w	r0, #1
 8000542:	f000 fb04 	bl	8000b4e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000

08000554 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a0d      	ldr	r2, [pc, #52]	; (8000598 <HAL_TIM_Base_MspInit+0x44>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d113      	bne.n	800058e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000566:	4b0d      	ldr	r3, [pc, #52]	; (800059c <HAL_TIM_Base_MspInit+0x48>)
 8000568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800056a:	4a0c      	ldr	r2, [pc, #48]	; (800059c <HAL_TIM_Base_MspInit+0x48>)
 800056c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000570:	6613      	str	r3, [r2, #96]	; 0x60
 8000572:	4b0a      	ldr	r3, [pc, #40]	; (800059c <HAL_TIM_Base_MspInit+0x48>)
 8000574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2105      	movs	r1, #5
 8000582:	2019      	movs	r0, #25
 8000584:	f000 fae3 	bl	8000b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000588:	2019      	movs	r0, #25
 800058a:	f000 fafc 	bl	8000b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800058e:	bf00      	nop
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40014400 	.word	0x40014400
 800059c:	40021000 	.word	0x40021000

080005a0 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <HAL_WWDG_MspInit+0x38>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d10b      	bne.n	80005ca <HAL_WWDG_MspInit+0x2a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 80005b2:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <HAL_WWDG_MspInit+0x3c>)
 80005b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005b6:	4a09      	ldr	r2, [pc, #36]	; (80005dc <HAL_WWDG_MspInit+0x3c>)
 80005b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005bc:	6593      	str	r3, [r2, #88]	; 0x58
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <HAL_WWDG_MspInit+0x3c>)
 80005c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40002c00 	.word	0x40002c00
 80005dc:	40021000 	.word	0x40021000

080005e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <NMI_Handler+0x4>

080005e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <HardFault_Handler+0x4>

080005ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <MemManage_Handler+0x4>

080005f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <BusFault_Handler+0x4>

080005f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <UsageFault_Handler+0x4>

080005fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000610:	f000 f9a2 	bl	8000958 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000614:	f003 f932 	bl	800387c <xTaskGetSchedulerState>
 8000618:	4603      	mov	r3, r0
 800061a:	2b01      	cmp	r3, #1
 800061c:	d001      	beq.n	8000622 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800061e:	f003 ff1b 	bl	8004458 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800062c:	4802      	ldr	r0, [pc, #8]	; (8000638 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800062e:	f001 f9b9 	bl	80019a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000090 	.word	0x20000090

0800063c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <SystemInit+0x20>)
 8000642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000646:	4a05      	ldr	r2, [pc, #20]	; (800065c <SystemInit+0x20>)
 8000648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800064c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <USART2_Init>:
// UART Ports:
// ===================================================
// PA.2 = USART2_TX (AF7)  |  PA.3 = USART2_RX (AF7)

void USART2_Init(int baudrate)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	////////////  ENABLE CLOCKS	/////////////////

	// enable USART2 CLK  (for the USART2 peripheral)
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 8000668:	4b60      	ldr	r3, [pc, #384]	; (80007ec <USART2_Init+0x18c>)
 800066a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800066c:	4a5f      	ldr	r2, [pc, #380]	; (80007ec <USART2_Init+0x18c>)
 800066e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000672:	6593      	str	r3, [r2, #88]	; 0x58

	// enable GPIOA CLK (for the GPIO port A pins)
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000674:	4b5d      	ldr	r3, [pc, #372]	; (80007ec <USART2_Init+0x18c>)
 8000676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000678:	4a5c      	ldr	r2, [pc, #368]	; (80007ec <USART2_Init+0x18c>)
 800067a:	f043 0301 	orr.w	r3, r3, #1
 800067e:	64d3      	str	r3, [r2, #76]	; 0x4c

	//////////// CONFIGURE GPIO /////////////////
	/* Configure the IO Speed */
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED2_Msk | GPIO_OSPEEDR_OSPEED3_Msk);
 8000680:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000684:	689b      	ldr	r3, [r3, #8]
 8000686:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800068a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800068e:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= GPIO_SPEED_FREQ_VERY_HIGH << GPIO_OSPEEDR_OSPEED2_Pos;
 8000690:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800069a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800069e:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= GPIO_SPEED_FREQ_VERY_HIGH << GPIO_OSPEEDR_OSPEED3_Pos;
 80006a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80006ae:	6093      	str	r3, [r2, #8]

	/* Configure the IO Output Type to Push-Pull */
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2_Msk | GPIO_OTYPER_OT3_Msk);
 80006b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006ba:	f023 030c 	bic.w	r3, r3, #12
 80006be:	6053      	str	r3, [r2, #4]

	/* Set the Pull-up/down  to none */
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2_Msk | GPIO_PUPDR_PUPD3_Msk);
 80006c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006c4:	68db      	ldr	r3, [r3, #12]
 80006c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80006ce:	60d3      	str	r3, [r2, #12]

	/* Configure Alternate functions */
	GPIOA->AFR[0] &=  ~(GPIO_AFRL_AFSEL2_Msk | GPIO_AFRL_AFSEL3_Msk);
 80006d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006d4:	6a1b      	ldr	r3, [r3, #32]
 80006d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80006de:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  GPIO_AF7_USART2 << GPIO_AFRL_AFSEL2_Pos;
 80006e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006e4:	6a1b      	ldr	r3, [r3, #32]
 80006e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80006ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  GPIO_AF7_USART2 << GPIO_AFRL_AFSEL3_Pos;
 80006f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006f4:	6a1b      	ldr	r3, [r3, #32]
 80006f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006fa:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80006fe:	6213      	str	r3, [r2, #32]

	/* Configure IO Direction mode to Alternate */
	GPIOA->MODER &= ~(GPIO_MODER_MODE2_Msk  | GPIO_MODER_MODE3_Msk);
 8000700:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800070a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800070e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODE_AF_PP << GPIO_MODER_MODE2_Pos;
 8000710:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800071a:	f043 0320 	orr.w	r3, r3, #32
 800071e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODE_AF_PP << GPIO_MODER_MODE3_Pos;
 8000720:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800072a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072e:	6013      	str	r3, [r2, #0]

	//////////// CONFIGURE USART2 /////////////////
	// Disable UART
	USART2->CR1 &= ~USART_CR1_UE;
 8000730:	4b2f      	ldr	r3, [pc, #188]	; (80007f0 <USART2_Init+0x190>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a2e      	ldr	r2, [pc, #184]	; (80007f0 <USART2_Init+0x190>)
 8000736:	f023 0301 	bic.w	r3, r3, #1
 800073a:	6013      	str	r3, [r2, #0]

	/* Set the UART Communication parameters */
	USART2->CR1 &= ~(USART_CR1_M1_Pos | USART_CR1_PCE_Msk | USART_CR1_OVER8_Msk | USART_CR1_TE_Msk | USART_CR1_RE_Msk);
 800073c:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <USART2_Init+0x190>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a2b      	ldr	r2, [pc, #172]	; (80007f0 <USART2_Init+0x190>)
 8000742:	f423 4304 	bic.w	r3, r3, #33792	; 0x8400
 8000746:	f023 031c 	bic.w	r3, r3, #28
 800074a:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= UART_WORDLENGTH_8B | UART_PARITY_NONE | UART_OVERSAMPLING_16 | USART_CR1_TE | USART_CR1_RE;
 800074c:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <USART2_Init+0x190>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a27      	ldr	r2, [pc, #156]	; (80007f0 <USART2_Init+0x190>)
 8000752:	f043 030c 	orr.w	r3, r3, #12
 8000756:	6013      	str	r3, [r2, #0]

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
	USART2->CR2 &= ~USART_CR2_STOP;
 8000758:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <USART2_Init+0x190>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	4a24      	ldr	r2, [pc, #144]	; (80007f0 <USART2_Init+0x190>)
 800075e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000762:	6053      	str	r3, [r2, #4]
	USART2->CR2 |= UART_STOPBITS_1 ;
 8000764:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <USART2_Init+0x190>)
 8000766:	4a22      	ldr	r2, [pc, #136]	; (80007f0 <USART2_Init+0x190>)
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	6053      	str	r3, [r2, #4]

	/*-------------------------- USART CR3 Configuration -----------------------*/
	/* Configure
	 * - UART HardWare Flow Control: set CTSE and RTSE bits according to HwFlowCtl value
	 * - One-bit sampling method versus three samples' majority rule according to huart->Init.OneBitSampling */
	USART2->CR3 &= ~(USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT);
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <USART2_Init+0x190>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	4a1f      	ldr	r2, [pc, #124]	; (80007f0 <USART2_Init+0x190>)
 8000772:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8000776:	6093      	str	r3, [r2, #8]
	USART2->CR3 |= UART_HWCONTROL_NONE | UART_OVERSAMPLING_16;
 8000778:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <USART2_Init+0x190>)
 800077a:	4a1d      	ldr	r2, [pc, #116]	; (80007f0 <USART2_Init+0x190>)
 800077c:	689b      	ldr	r3, [r3, #8]
 800077e:	6093      	str	r3, [r2, #8]

	/*-------------------------- USART BRR Configuration -----------------------*/
#define UART_DIV_SAMPLING16(__PCLK__, __BAUD__)  (((__PCLK__) + ((__BAUD__)/2U)) / (__BAUD__))
	uint32_t pclk = 16000000;		//PCLK1Freq;
 8000780:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <USART2_Init+0x194>)
 8000782:	60fb      	str	r3, [r7, #12]
	uint32_t usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, baudrate));
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	085a      	lsrs	r2, r3, #1
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	441a      	add	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000792:	b29b      	uxth	r3, r3
 8000794:	60bb      	str	r3, [r7, #8]
	USART2->BRR = usartdiv;
 8000796:	4a16      	ldr	r2, [pc, #88]	; (80007f0 <USART2_Init+0x190>)
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	60d3      	str	r3, [r2, #12]

	/* In asynchronous mode, the following bits must be kept cleared:
	 *  - LINEN and CLKEN bits in the USART_CR2 register
	 *  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	USART2->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <USART2_Init+0x190>)
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <USART2_Init+0x190>)
 80007a2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80007a6:	6053      	str	r3, [r2, #4]
	USART2->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <USART2_Init+0x190>)
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <USART2_Init+0x190>)
 80007ae:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80007b2:	6093      	str	r3, [r2, #8]

	// Enable UART
	USART2->CR1 |= USART_CR1_UE;
 80007b4:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <USART2_Init+0x190>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <USART2_Init+0x190>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	6013      	str	r3, [r2, #0]

	while ( (USART2->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 80007c0:	bf00      	nop
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <USART2_Init+0x190>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0f9      	beq.n	80007c2 <USART2_Init+0x162>
	while ( (USART2->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 80007ce:	bf00      	nop
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <USART2_Init+0x190>)
 80007d2:	69db      	ldr	r3, [r3, #28]
 80007d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d0f9      	beq.n	80007d0 <USART2_Init+0x170>
}
 80007dc:	bf00      	nop
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40004400 	.word	0x40004400
 80007f4:	00f42400 	.word	0x00f42400

080007f8 <USART_Write>:
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
	// Reading USART_DR automatically clears the RXNE flag 
}

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 80007f8:	b480      	push	{r7}
 80007fa:	b087      	sub	sp, #28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data register), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	e010      	b.n	800082c <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 800080a:	bf00      	nop
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	69db      	ldr	r3, [r3, #28]
 8000810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000814:	2b00      	cmp	r3, #0
 8000816:	d0f9      	beq.n	800080c <USART_Write+0x14>
			;   							// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF;		// writing USART_TDR automatically clears the TXE flag
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	68ba      	ldr	r2, [r7, #8]
 800081c:	4413      	add	r3, r2
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	b29a      	uxth	r2, r3
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	851a      	strh	r2, [r3, #40]	; 0x28
	for (i = 0; i < nBytes; i++) {
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	3301      	adds	r3, #1
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	429a      	cmp	r2, r3
 8000832:	d8ea      	bhi.n	800080a <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC))
 8000834:	bf00      	nop
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800083e:	2b00      	cmp	r3, #0
 8000840:	d0f9      	beq.n	8000836 <USART_Write+0x3e>
		;  									// wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	61da      	str	r2, [r3, #28]
}   
 800084e:	bf00      	nop
 8000850:	371c      	adds	r7, #28
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800085c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000894 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000860:	f7ff feec 	bl	800063c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <LoopForever+0x6>)
  ldr r1, =_edata
 8000866:	490d      	ldr	r1, [pc, #52]	; (800089c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000868:	4a0d      	ldr	r2, [pc, #52]	; (80008a0 <LoopForever+0xe>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800087c:	4c0a      	ldr	r4, [pc, #40]	; (80008a8 <LoopForever+0x16>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800088a:	f004 f85f 	bl	800494c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800088e:	f7ff fd27 	bl	80002e0 <main>

08000892 <LoopForever>:

LoopForever:
    b LoopForever
 8000892:	e7fe      	b.n	8000892 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000894:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800089c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008a0:	080054c8 	.word	0x080054c8
  ldr r2, =_sbss
 80008a4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008a8:	20001b3c 	.word	0x20001b3c

080008ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC1_2_IRQHandler>

080008ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008b4:	2300      	movs	r3, #0
 80008b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 f93d 	bl	8000b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008be:	200f      	movs	r0, #15
 80008c0:	f000 f80e 	bl	80008e0 <HAL_InitTick>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d002      	beq.n	80008d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	71fb      	strb	r3, [r7, #7]
 80008ce:	e001      	b.n	80008d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008d0:	f7ff fe18 	bl	8000504 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008d4:	79fb      	ldrb	r3, [r7, #7]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008e8:	2300      	movs	r3, #0
 80008ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <HAL_InitTick+0x6c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d023      	beq.n	800093c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <HAL_InitTick+0x70>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <HAL_InitTick+0x6c>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4619      	mov	r1, r3
 80008fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000902:	fbb3 f3f1 	udiv	r3, r3, r1
 8000906:	fbb2 f3f3 	udiv	r3, r2, r3
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f949 	bl	8000ba2 <HAL_SYSTICK_Config>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d10f      	bne.n	8000936 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b0f      	cmp	r3, #15
 800091a:	d809      	bhi.n	8000930 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091c:	2200      	movs	r2, #0
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	f000 f913 	bl	8000b4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000928:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <HAL_InitTick+0x74>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6013      	str	r3, [r2, #0]
 800092e:	e007      	b.n	8000940 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000930:	2301      	movs	r3, #1
 8000932:	73fb      	strb	r3, [r7, #15]
 8000934:	e004      	b.n	8000940 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	73fb      	strb	r3, [r7, #15]
 800093a:	e001      	b.n	8000940 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800093c:	2301      	movs	r3, #1
 800093e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000940:	7bfb      	ldrb	r3, [r7, #15]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000008 	.word	0x20000008
 8000950:	20000000 	.word	0x20000000
 8000954:	20000004 	.word	0x20000004

08000958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_IncTick+0x20>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x24>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4413      	add	r3, r2
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_IncTick+0x24>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000008 	.word	0x20000008
 800097c:	2000015c 	.word	0x2000015c

08000980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <HAL_GetTick+0x14>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	2000015c 	.word	0x2000015c

08000998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ca:	4a04      	ldr	r2, [pc, #16]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	60d3      	str	r3, [r2, #12]
}
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <__NVIC_GetPriorityGrouping+0x18>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	f003 0307 	and.w	r3, r3, #7
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	db0b      	blt.n	8000a26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f003 021f 	and.w	r2, r3, #31
 8000a14:	4907      	ldr	r1, [pc, #28]	; (8000a34 <__NVIC_EnableIRQ+0x38>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	095b      	lsrs	r3, r3, #5
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db0a      	blt.n	8000a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	490c      	ldr	r1, [pc, #48]	; (8000a84 <__NVIC_SetPriority+0x4c>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a60:	e00a      	b.n	8000a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	; (8000a88 <__NVIC_SetPriority+0x50>)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f003 030f 	and.w	r3, r3, #15
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	761a      	strb	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f1c3 0307 	rsb	r3, r3, #7
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	bf28      	it	cs
 8000aaa:	2304      	movcs	r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d902      	bls.n	8000abc <NVIC_EncodePriority+0x30>
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b03      	subs	r3, #3
 8000aba:	e000      	b.n	8000abe <NVIC_EncodePriority+0x32>
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43da      	mvns	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43d9      	mvns	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	4313      	orrs	r3, r2
         );
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	; 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b04:	d301      	bcc.n	8000b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00f      	b.n	8000b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <SysTick_Config+0x40>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b12:	210f      	movs	r1, #15
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f7ff ff8e 	bl	8000a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <SysTick_Config+0x40>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b22:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <SysTick_Config+0x40>)
 8000b24:	2207      	movs	r2, #7
 8000b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	e000e010 	.word	0xe000e010

08000b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ff29 	bl	8000998 <__NVIC_SetPriorityGrouping>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b086      	sub	sp, #24
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4603      	mov	r3, r0
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
 8000b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b60:	f7ff ff3e 	bl	80009e0 <__NVIC_GetPriorityGrouping>
 8000b64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	6978      	ldr	r0, [r7, #20]
 8000b6c:	f7ff ff8e 	bl	8000a8c <NVIC_EncodePriority>
 8000b70:	4602      	mov	r2, r0
 8000b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff5d 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff31 	bl	80009fc <__NVIC_EnableIRQ>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ffa2 	bl	8000af4 <SysTick_Config>
 8000bb0:	4603      	mov	r3, r0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40007000 	.word	0x40007000

08000bd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000be6:	d130      	bne.n	8000c4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000be8:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bf4:	d038      	beq.n	8000c68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf6:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bfe:	4a1e      	ldr	r2, [pc, #120]	; (8000c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c06:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2232      	movs	r2, #50	; 0x32
 8000c0c:	fb02 f303 	mul.w	r3, r2, r3
 8000c10:	4a1b      	ldr	r2, [pc, #108]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c12:	fba2 2303 	umull	r2, r3, r2, r3
 8000c16:	0c9b      	lsrs	r3, r3, #18
 8000c18:	3301      	adds	r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c1c:	e002      	b.n	8000c24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3b01      	subs	r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c30:	d102      	bne.n	8000c38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1f2      	bne.n	8000c1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c44:	d110      	bne.n	8000c68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e00f      	b.n	8000c6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c56:	d007      	beq.n	8000c68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c60:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40007000 	.word	0x40007000
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	431bde83 	.word	0x431bde83

08000c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d101      	bne.n	8000c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e3ca      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c96:	4b97      	ldr	r3, [pc, #604]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f003 030c 	and.w	r3, r3, #12
 8000c9e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ca0:	4b94      	ldr	r3, [pc, #592]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	f003 0303 	and.w	r3, r3, #3
 8000ca8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 0310 	and.w	r3, r3, #16
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 80e4 	beq.w	8000e80 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d007      	beq.n	8000cce <HAL_RCC_OscConfig+0x4a>
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	2b0c      	cmp	r3, #12
 8000cc2:	f040 808b 	bne.w	8000ddc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	f040 8087 	bne.w	8000ddc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cce:	4b89      	ldr	r3, [pc, #548]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d005      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x62>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e3a2      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6a1a      	ldr	r2, [r3, #32]
 8000cea:	4b82      	ldr	r3, [pc, #520]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0308 	and.w	r3, r3, #8
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d004      	beq.n	8000d00 <HAL_RCC_OscConfig+0x7c>
 8000cf6:	4b7f      	ldr	r3, [pc, #508]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cfe:	e005      	b.n	8000d0c <HAL_RCC_OscConfig+0x88>
 8000d00:	4b7c      	ldr	r3, [pc, #496]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d06:	091b      	lsrs	r3, r3, #4
 8000d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d223      	bcs.n	8000d58 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a1b      	ldr	r3, [r3, #32]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 fd1d 	bl	8001754 <RCC_SetFlashLatencyFromMSIRange>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e383      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d24:	4b73      	ldr	r3, [pc, #460]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a72      	ldr	r2, [pc, #456]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000d2a:	f043 0308 	orr.w	r3, r3, #8
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	4b70      	ldr	r3, [pc, #448]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a1b      	ldr	r3, [r3, #32]
 8000d3c:	496d      	ldr	r1, [pc, #436]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d42:	4b6c      	ldr	r3, [pc, #432]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	4968      	ldr	r1, [pc, #416]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000d52:	4313      	orrs	r3, r2
 8000d54:	604b      	str	r3, [r1, #4]
 8000d56:	e025      	b.n	8000da4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d58:	4b66      	ldr	r3, [pc, #408]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a65      	ldr	r2, [pc, #404]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000d5e:	f043 0308 	orr.w	r3, r3, #8
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	4b63      	ldr	r3, [pc, #396]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a1b      	ldr	r3, [r3, #32]
 8000d70:	4960      	ldr	r1, [pc, #384]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000d72:	4313      	orrs	r3, r2
 8000d74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d76:	4b5f      	ldr	r3, [pc, #380]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	021b      	lsls	r3, r3, #8
 8000d84:	495b      	ldr	r1, [pc, #364]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000d86:	4313      	orrs	r3, r2
 8000d88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d109      	bne.n	8000da4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6a1b      	ldr	r3, [r3, #32]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 fcdd 	bl	8001754 <RCC_SetFlashLatencyFromMSIRange>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e343      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000da4:	f000 fc4a 	bl	800163c <HAL_RCC_GetSysClockFreq>
 8000da8:	4602      	mov	r2, r0
 8000daa:	4b52      	ldr	r3, [pc, #328]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	091b      	lsrs	r3, r3, #4
 8000db0:	f003 030f 	and.w	r3, r3, #15
 8000db4:	4950      	ldr	r1, [pc, #320]	; (8000ef8 <HAL_RCC_OscConfig+0x274>)
 8000db6:	5ccb      	ldrb	r3, [r1, r3]
 8000db8:	f003 031f 	and.w	r3, r3, #31
 8000dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc0:	4a4e      	ldr	r2, [pc, #312]	; (8000efc <HAL_RCC_OscConfig+0x278>)
 8000dc2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dc4:	4b4e      	ldr	r3, [pc, #312]	; (8000f00 <HAL_RCC_OscConfig+0x27c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fd89 	bl	80008e0 <HAL_InitTick>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d052      	beq.n	8000e7e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	e327      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d032      	beq.n	8000e4a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000de4:	4b43      	ldr	r3, [pc, #268]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a42      	ldr	r2, [pc, #264]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000df0:	f7ff fdc6 	bl	8000980 <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000df8:	f7ff fdc2 	bl	8000980 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e310      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d0f0      	beq.n	8000df8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e16:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a36      	ldr	r2, [pc, #216]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	4b34      	ldr	r3, [pc, #208]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6a1b      	ldr	r3, [r3, #32]
 8000e2e:	4931      	ldr	r1, [pc, #196]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000e30:	4313      	orrs	r3, r2
 8000e32:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e34:	4b2f      	ldr	r3, [pc, #188]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69db      	ldr	r3, [r3, #28]
 8000e40:	021b      	lsls	r3, r3, #8
 8000e42:	492c      	ldr	r1, [pc, #176]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000e44:	4313      	orrs	r3, r2
 8000e46:	604b      	str	r3, [r1, #4]
 8000e48:	e01a      	b.n	8000e80 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a29      	ldr	r2, [pc, #164]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000e50:	f023 0301 	bic.w	r3, r3, #1
 8000e54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e56:	f7ff fd93 	bl	8000980 <HAL_GetTick>
 8000e5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e5c:	e008      	b.n	8000e70 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e5e:	f7ff fd8f 	bl	8000980 <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d901      	bls.n	8000e70 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e2dd      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e70:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1f0      	bne.n	8000e5e <HAL_RCC_OscConfig+0x1da>
 8000e7c:	e000      	b.n	8000e80 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d074      	beq.n	8000f76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	2b08      	cmp	r3, #8
 8000e90:	d005      	beq.n	8000e9e <HAL_RCC_OscConfig+0x21a>
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	2b0c      	cmp	r3, #12
 8000e96:	d10e      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d10b      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d064      	beq.n	8000f74 <HAL_RCC_OscConfig+0x2f0>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d160      	bne.n	8000f74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e2ba      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ebe:	d106      	bne.n	8000ece <HAL_RCC_OscConfig+0x24a>
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	e026      	b.n	8000f1c <HAL_RCC_OscConfig+0x298>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ed6:	d115      	bne.n	8000f04 <HAL_RCC_OscConfig+0x280>
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000ede:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a02      	ldr	r2, [pc, #8]	; (8000ef4 <HAL_RCC_OscConfig+0x270>)
 8000eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	e014      	b.n	8000f1c <HAL_RCC_OscConfig+0x298>
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	080053ec 	.word	0x080053ec
 8000efc:	20000000 	.word	0x20000000
 8000f00:	20000004 	.word	0x20000004
 8000f04:	4ba0      	ldr	r3, [pc, #640]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a9f      	ldr	r2, [pc, #636]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8000f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4b9d      	ldr	r3, [pc, #628]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a9c      	ldr	r2, [pc, #624]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8000f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d013      	beq.n	8000f4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f24:	f7ff fd2c 	bl	8000980 <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f2c:	f7ff fd28 	bl	8000980 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b64      	cmp	r3, #100	; 0x64
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e276      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f3e:	4b92      	ldr	r3, [pc, #584]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f0      	beq.n	8000f2c <HAL_RCC_OscConfig+0x2a8>
 8000f4a:	e014      	b.n	8000f76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fd18 	bl	8000980 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f54:	f7ff fd14 	bl	8000980 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b64      	cmp	r3, #100	; 0x64
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e262      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f66:	4b88      	ldr	r3, [pc, #544]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f0      	bne.n	8000f54 <HAL_RCC_OscConfig+0x2d0>
 8000f72:	e000      	b.n	8000f76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d060      	beq.n	8001044 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	d005      	beq.n	8000f94 <HAL_RCC_OscConfig+0x310>
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	2b0c      	cmp	r3, #12
 8000f8c:	d119      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d116      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f94:	4b7c      	ldr	r3, [pc, #496]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d005      	beq.n	8000fac <HAL_RCC_OscConfig+0x328>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e23f      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fac:	4b76      	ldr	r3, [pc, #472]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	061b      	lsls	r3, r3, #24
 8000fba:	4973      	ldr	r1, [pc, #460]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fc0:	e040      	b.n	8001044 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d023      	beq.n	8001012 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fca:	4b6f      	ldr	r3, [pc, #444]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a6e      	ldr	r2, [pc, #440]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8000fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fcd3 	bl	8000980 <HAL_GetTick>
 8000fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fde:	f7ff fccf 	bl	8000980 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e21d      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ff0:	4b65      	ldr	r3, [pc, #404]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0f0      	beq.n	8000fde <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffc:	4b62      	ldr	r3, [pc, #392]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	061b      	lsls	r3, r3, #24
 800100a:	495f      	ldr	r1, [pc, #380]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 800100c:	4313      	orrs	r3, r2
 800100e:	604b      	str	r3, [r1, #4]
 8001010:	e018      	b.n	8001044 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001012:	4b5d      	ldr	r3, [pc, #372]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a5c      	ldr	r2, [pc, #368]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8001018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800101c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101e:	f7ff fcaf 	bl	8000980 <HAL_GetTick>
 8001022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001024:	e008      	b.n	8001038 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001026:	f7ff fcab 	bl	8000980 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e1f9      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001038:	4b53      	ldr	r3, [pc, #332]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f0      	bne.n	8001026 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0308 	and.w	r3, r3, #8
 800104c:	2b00      	cmp	r3, #0
 800104e:	d03c      	beq.n	80010ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d01c      	beq.n	8001092 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001058:	4b4b      	ldr	r3, [pc, #300]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 800105a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800105e:	4a4a      	ldr	r2, [pc, #296]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001068:	f7ff fc8a 	bl	8000980 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001070:	f7ff fc86 	bl	8000980 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e1d4      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001082:	4b41      	ldr	r3, [pc, #260]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8001084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0ef      	beq.n	8001070 <HAL_RCC_OscConfig+0x3ec>
 8001090:	e01b      	b.n	80010ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001092:	4b3d      	ldr	r3, [pc, #244]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8001094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001098:	4a3b      	ldr	r2, [pc, #236]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 800109a:	f023 0301 	bic.w	r3, r3, #1
 800109e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a2:	f7ff fc6d 	bl	8000980 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010aa:	f7ff fc69 	bl	8000980 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e1b7      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010bc:	4b32      	ldr	r3, [pc, #200]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 80010be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1ef      	bne.n	80010aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 80a6 	beq.w	8001224 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010dc:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 80010de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d10d      	bne.n	8001104 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010e8:	4b27      	ldr	r3, [pc, #156]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 80010ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ec:	4a26      	ldr	r2, [pc, #152]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 80010ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f2:	6593      	str	r3, [r2, #88]	; 0x58
 80010f4:	4b24      	ldr	r3, [pc, #144]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 80010f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001100:	2301      	movs	r3, #1
 8001102:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001104:	4b21      	ldr	r3, [pc, #132]	; (800118c <HAL_RCC_OscConfig+0x508>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110c:	2b00      	cmp	r3, #0
 800110e:	d118      	bne.n	8001142 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001110:	4b1e      	ldr	r3, [pc, #120]	; (800118c <HAL_RCC_OscConfig+0x508>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a1d      	ldr	r2, [pc, #116]	; (800118c <HAL_RCC_OscConfig+0x508>)
 8001116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800111c:	f7ff fc30 	bl	8000980 <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001124:	f7ff fc2c 	bl	8000980 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e17a      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_RCC_OscConfig+0x508>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113e:	2b00      	cmp	r3, #0
 8001140:	d0f0      	beq.n	8001124 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d108      	bne.n	800115c <HAL_RCC_OscConfig+0x4d8>
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 800114c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001150:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800115a:	e029      	b.n	80011b0 <HAL_RCC_OscConfig+0x52c>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	2b05      	cmp	r3, #5
 8001162:	d115      	bne.n	8001190 <HAL_RCC_OscConfig+0x50c>
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8001166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800116a:	4a07      	ldr	r2, [pc, #28]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8001176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800117a:	4a03      	ldr	r2, [pc, #12]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001184:	e014      	b.n	80011b0 <HAL_RCC_OscConfig+0x52c>
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000
 800118c:	40007000 	.word	0x40007000
 8001190:	4b9c      	ldr	r3, [pc, #624]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 8001192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001196:	4a9b      	ldr	r2, [pc, #620]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 8001198:	f023 0301 	bic.w	r3, r3, #1
 800119c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011a0:	4b98      	ldr	r3, [pc, #608]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 80011a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011a6:	4a97      	ldr	r2, [pc, #604]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 80011a8:	f023 0304 	bic.w	r3, r3, #4
 80011ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d016      	beq.n	80011e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b8:	f7ff fbe2 	bl	8000980 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011be:	e00a      	b.n	80011d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011c0:	f7ff fbde 	bl	8000980 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e12a      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011d6:	4b8b      	ldr	r3, [pc, #556]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 80011d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0ed      	beq.n	80011c0 <HAL_RCC_OscConfig+0x53c>
 80011e4:	e015      	b.n	8001212 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e6:	f7ff fbcb 	bl	8000980 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011ec:	e00a      	b.n	8001204 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ee:	f7ff fbc7 	bl	8000980 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e113      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001204:	4b7f      	ldr	r3, [pc, #508]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 8001206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1ed      	bne.n	80011ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001212:	7ffb      	ldrb	r3, [r7, #31]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d105      	bne.n	8001224 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001218:	4b7a      	ldr	r3, [pc, #488]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 800121a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121c:	4a79      	ldr	r2, [pc, #484]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 800121e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001222:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 80fe 	beq.w	800142a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001232:	2b02      	cmp	r3, #2
 8001234:	f040 80d0 	bne.w	80013d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001238:	4b72      	ldr	r3, [pc, #456]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f003 0203 	and.w	r2, r3, #3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001248:	429a      	cmp	r2, r3
 800124a:	d130      	bne.n	80012ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	3b01      	subs	r3, #1
 8001258:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800125a:	429a      	cmp	r2, r3
 800125c:	d127      	bne.n	80012ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001268:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800126a:	429a      	cmp	r2, r3
 800126c:	d11f      	bne.n	80012ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001278:	2a07      	cmp	r2, #7
 800127a:	bf14      	ite	ne
 800127c:	2201      	movne	r2, #1
 800127e:	2200      	moveq	r2, #0
 8001280:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001282:	4293      	cmp	r3, r2
 8001284:	d113      	bne.n	80012ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001290:	085b      	lsrs	r3, r3, #1
 8001292:	3b01      	subs	r3, #1
 8001294:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001296:	429a      	cmp	r2, r3
 8001298:	d109      	bne.n	80012ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	085b      	lsrs	r3, r3, #1
 80012a6:	3b01      	subs	r3, #1
 80012a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d06e      	beq.n	800138c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	2b0c      	cmp	r3, #12
 80012b2:	d069      	beq.n	8001388 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012b4:	4b53      	ldr	r3, [pc, #332]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d105      	bne.n	80012cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80012c0:	4b50      	ldr	r3, [pc, #320]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e0ad      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80012d0:	4b4c      	ldr	r3, [pc, #304]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a4b      	ldr	r2, [pc, #300]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 80012d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012dc:	f7ff fb50 	bl	8000980 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e4:	f7ff fb4c 	bl	8000980 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e09a      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012f6:	4b43      	ldr	r3, [pc, #268]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001302:	4b40      	ldr	r3, [pc, #256]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	4b40      	ldr	r3, [pc, #256]	; (8001408 <HAL_RCC_OscConfig+0x784>)
 8001308:	4013      	ands	r3, r2
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001312:	3a01      	subs	r2, #1
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	4311      	orrs	r1, r2
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800131c:	0212      	lsls	r2, r2, #8
 800131e:	4311      	orrs	r1, r2
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001324:	0852      	lsrs	r2, r2, #1
 8001326:	3a01      	subs	r2, #1
 8001328:	0552      	lsls	r2, r2, #21
 800132a:	4311      	orrs	r1, r2
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001330:	0852      	lsrs	r2, r2, #1
 8001332:	3a01      	subs	r2, #1
 8001334:	0652      	lsls	r2, r2, #25
 8001336:	4311      	orrs	r1, r2
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800133c:	0912      	lsrs	r2, r2, #4
 800133e:	0452      	lsls	r2, r2, #17
 8001340:	430a      	orrs	r2, r1
 8001342:	4930      	ldr	r1, [pc, #192]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 8001344:	4313      	orrs	r3, r2
 8001346:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001348:	4b2e      	ldr	r3, [pc, #184]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a2d      	ldr	r2, [pc, #180]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 800134e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001352:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001354:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	4a2a      	ldr	r2, [pc, #168]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 800135a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800135e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001360:	f7ff fb0e 	bl	8000980 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001368:	f7ff fb0a 	bl	8000980 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e058      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800137a:	4b22      	ldr	r3, [pc, #136]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001386:	e050      	b.n	800142a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e04f      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800138c:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d148      	bne.n	800142a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a19      	ldr	r2, [pc, #100]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 800139e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	4a16      	ldr	r2, [pc, #88]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 80013aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013b0:	f7ff fae6 	bl	8000980 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b8:	f7ff fae2 	bl	8000980 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e030      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0x734>
 80013d6:	e028      	b.n	800142a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2b0c      	cmp	r3, #12
 80013dc:	d023      	beq.n	8001426 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a08      	ldr	r2, [pc, #32]	; (8001404 <HAL_RCC_OscConfig+0x780>)
 80013e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ea:	f7ff fac9 	bl	8000980 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f0:	e00c      	b.n	800140c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f2:	f7ff fac5 	bl	8000980 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d905      	bls.n	800140c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e013      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
 8001404:	40021000 	.word	0x40021000
 8001408:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1ec      	bne.n	80013f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	4905      	ldr	r1, [pc, #20]	; (8001434 <HAL_RCC_OscConfig+0x7b0>)
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_RCC_OscConfig+0x7b4>)
 8001420:	4013      	ands	r3, r2
 8001422:	60cb      	str	r3, [r1, #12]
 8001424:	e001      	b.n	800142a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3720      	adds	r7, #32
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40021000 	.word	0x40021000
 8001438:	feeefffc 	.word	0xfeeefffc

0800143c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e0e7      	b.n	8001620 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001450:	4b75      	ldr	r3, [pc, #468]	; (8001628 <HAL_RCC_ClockConfig+0x1ec>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d910      	bls.n	8001480 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145e:	4b72      	ldr	r3, [pc, #456]	; (8001628 <HAL_RCC_ClockConfig+0x1ec>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f023 0207 	bic.w	r2, r3, #7
 8001466:	4970      	ldr	r1, [pc, #448]	; (8001628 <HAL_RCC_ClockConfig+0x1ec>)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	4313      	orrs	r3, r2
 800146c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800146e:	4b6e      	ldr	r3, [pc, #440]	; (8001628 <HAL_RCC_ClockConfig+0x1ec>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d001      	beq.n	8001480 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e0cf      	b.n	8001620 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d010      	beq.n	80014ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	4b66      	ldr	r3, [pc, #408]	; (800162c <HAL_RCC_ClockConfig+0x1f0>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001498:	429a      	cmp	r2, r3
 800149a:	d908      	bls.n	80014ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800149c:	4b63      	ldr	r3, [pc, #396]	; (800162c <HAL_RCC_ClockConfig+0x1f0>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	4960      	ldr	r1, [pc, #384]	; (800162c <HAL_RCC_ClockConfig+0x1f0>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d04c      	beq.n	8001554 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d107      	bne.n	80014d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014c2:	4b5a      	ldr	r3, [pc, #360]	; (800162c <HAL_RCC_ClockConfig+0x1f0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d121      	bne.n	8001512 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e0a6      	b.n	8001620 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014da:	4b54      	ldr	r3, [pc, #336]	; (800162c <HAL_RCC_ClockConfig+0x1f0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d115      	bne.n	8001512 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e09a      	b.n	8001620 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014f2:	4b4e      	ldr	r3, [pc, #312]	; (800162c <HAL_RCC_ClockConfig+0x1f0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d109      	bne.n	8001512 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e08e      	b.n	8001620 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001502:	4b4a      	ldr	r3, [pc, #296]	; (800162c <HAL_RCC_ClockConfig+0x1f0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e086      	b.n	8001620 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001512:	4b46      	ldr	r3, [pc, #280]	; (800162c <HAL_RCC_ClockConfig+0x1f0>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f023 0203 	bic.w	r2, r3, #3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	4943      	ldr	r1, [pc, #268]	; (800162c <HAL_RCC_ClockConfig+0x1f0>)
 8001520:	4313      	orrs	r3, r2
 8001522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001524:	f7ff fa2c 	bl	8000980 <HAL_GetTick>
 8001528:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	e00a      	b.n	8001542 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800152c:	f7ff fa28 	bl	8000980 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f241 3288 	movw	r2, #5000	; 0x1388
 800153a:	4293      	cmp	r3, r2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e06e      	b.n	8001620 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	4b3a      	ldr	r3, [pc, #232]	; (800162c <HAL_RCC_ClockConfig+0x1f0>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 020c 	and.w	r2, r3, #12
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	429a      	cmp	r2, r3
 8001552:	d1eb      	bne.n	800152c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d010      	beq.n	8001582 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	4b31      	ldr	r3, [pc, #196]	; (800162c <HAL_RCC_ClockConfig+0x1f0>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800156c:	429a      	cmp	r2, r3
 800156e:	d208      	bcs.n	8001582 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001570:	4b2e      	ldr	r3, [pc, #184]	; (800162c <HAL_RCC_ClockConfig+0x1f0>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	492b      	ldr	r1, [pc, #172]	; (800162c <HAL_RCC_ClockConfig+0x1f0>)
 800157e:	4313      	orrs	r3, r2
 8001580:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001582:	4b29      	ldr	r3, [pc, #164]	; (8001628 <HAL_RCC_ClockConfig+0x1ec>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d210      	bcs.n	80015b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <HAL_RCC_ClockConfig+0x1ec>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f023 0207 	bic.w	r2, r3, #7
 8001598:	4923      	ldr	r1, [pc, #140]	; (8001628 <HAL_RCC_ClockConfig+0x1ec>)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	4313      	orrs	r3, r2
 800159e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a0:	4b21      	ldr	r3, [pc, #132]	; (8001628 <HAL_RCC_ClockConfig+0x1ec>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d001      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e036      	b.n	8001620 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d008      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015be:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_RCC_ClockConfig+0x1f0>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	4918      	ldr	r1, [pc, #96]	; (800162c <HAL_RCC_ClockConfig+0x1f0>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d009      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <HAL_RCC_ClockConfig+0x1f0>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4910      	ldr	r1, [pc, #64]	; (800162c <HAL_RCC_ClockConfig+0x1f0>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015f0:	f000 f824 	bl	800163c <HAL_RCC_GetSysClockFreq>
 80015f4:	4602      	mov	r2, r0
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <HAL_RCC_ClockConfig+0x1f0>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	091b      	lsrs	r3, r3, #4
 80015fc:	f003 030f 	and.w	r3, r3, #15
 8001600:	490b      	ldr	r1, [pc, #44]	; (8001630 <HAL_RCC_ClockConfig+0x1f4>)
 8001602:	5ccb      	ldrb	r3, [r1, r3]
 8001604:	f003 031f 	and.w	r3, r3, #31
 8001608:	fa22 f303 	lsr.w	r3, r2, r3
 800160c:	4a09      	ldr	r2, [pc, #36]	; (8001634 <HAL_RCC_ClockConfig+0x1f8>)
 800160e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_RCC_ClockConfig+0x1fc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff f963 	bl	80008e0 <HAL_InitTick>
 800161a:	4603      	mov	r3, r0
 800161c:	72fb      	strb	r3, [r7, #11]

  return status;
 800161e:	7afb      	ldrb	r3, [r7, #11]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40022000 	.word	0x40022000
 800162c:	40021000 	.word	0x40021000
 8001630:	080053ec 	.word	0x080053ec
 8001634:	20000000 	.word	0x20000000
 8001638:	20000004 	.word	0x20000004

0800163c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800164a:	4b3e      	ldr	r3, [pc, #248]	; (8001744 <HAL_RCC_GetSysClockFreq+0x108>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001654:	4b3b      	ldr	r3, [pc, #236]	; (8001744 <HAL_RCC_GetSysClockFreq+0x108>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_RCC_GetSysClockFreq+0x34>
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	2b0c      	cmp	r3, #12
 8001668:	d121      	bne.n	80016ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d11e      	bne.n	80016ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001670:	4b34      	ldr	r3, [pc, #208]	; (8001744 <HAL_RCC_GetSysClockFreq+0x108>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0308 	and.w	r3, r3, #8
 8001678:	2b00      	cmp	r3, #0
 800167a:	d107      	bne.n	800168c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800167c:	4b31      	ldr	r3, [pc, #196]	; (8001744 <HAL_RCC_GetSysClockFreq+0x108>)
 800167e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001682:	0a1b      	lsrs	r3, r3, #8
 8001684:	f003 030f 	and.w	r3, r3, #15
 8001688:	61fb      	str	r3, [r7, #28]
 800168a:	e005      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800168c:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <HAL_RCC_GetSysClockFreq+0x108>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001698:	4a2b      	ldr	r2, [pc, #172]	; (8001748 <HAL_RCC_GetSysClockFreq+0x10c>)
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10d      	bne.n	80016c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ac:	e00a      	b.n	80016c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d102      	bne.n	80016ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016b4:	4b25      	ldr	r3, [pc, #148]	; (800174c <HAL_RCC_GetSysClockFreq+0x110>)
 80016b6:	61bb      	str	r3, [r7, #24]
 80016b8:	e004      	b.n	80016c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	2b08      	cmp	r3, #8
 80016be:	d101      	bne.n	80016c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016c0:	4b23      	ldr	r3, [pc, #140]	; (8001750 <HAL_RCC_GetSysClockFreq+0x114>)
 80016c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	2b0c      	cmp	r3, #12
 80016c8:	d134      	bne.n	8001734 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016ca:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <HAL_RCC_GetSysClockFreq+0x108>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d003      	beq.n	80016e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d003      	beq.n	80016e8 <HAL_RCC_GetSysClockFreq+0xac>
 80016e0:	e005      	b.n	80016ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <HAL_RCC_GetSysClockFreq+0x110>)
 80016e4:	617b      	str	r3, [r7, #20]
      break;
 80016e6:	e005      	b.n	80016f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_RCC_GetSysClockFreq+0x114>)
 80016ea:	617b      	str	r3, [r7, #20]
      break;
 80016ec:	e002      	b.n	80016f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	617b      	str	r3, [r7, #20]
      break;
 80016f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <HAL_RCC_GetSysClockFreq+0x108>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	091b      	lsrs	r3, r3, #4
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	3301      	adds	r3, #1
 8001700:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_RCC_GetSysClockFreq+0x108>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	fb03 f202 	mul.w	r2, r3, r2
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	fbb2 f3f3 	udiv	r3, r2, r3
 8001718:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_RCC_GetSysClockFreq+0x108>)
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	0e5b      	lsrs	r3, r3, #25
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	3301      	adds	r3, #1
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001732:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001734:	69bb      	ldr	r3, [r7, #24]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3724      	adds	r7, #36	; 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000
 8001748:	080053fc 	.word	0x080053fc
 800174c:	00f42400 	.word	0x00f42400
 8001750:	007a1200 	.word	0x007a1200

08001754 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800175c:	2300      	movs	r3, #0
 800175e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001760:	4b2a      	ldr	r3, [pc, #168]	; (800180c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800176c:	f7ff fa26 	bl	8000bbc <HAL_PWREx_GetVoltageRange>
 8001770:	6178      	str	r0, [r7, #20]
 8001772:	e014      	b.n	800179e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001774:	4b25      	ldr	r3, [pc, #148]	; (800180c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001778:	4a24      	ldr	r2, [pc, #144]	; (800180c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800177a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177e:	6593      	str	r3, [r2, #88]	; 0x58
 8001780:	4b22      	ldr	r3, [pc, #136]	; (800180c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800178c:	f7ff fa16 	bl	8000bbc <HAL_PWREx_GetVoltageRange>
 8001790:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001792:	4b1e      	ldr	r3, [pc, #120]	; (800180c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001796:	4a1d      	ldr	r2, [pc, #116]	; (800180c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800179c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017a4:	d10b      	bne.n	80017be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b80      	cmp	r3, #128	; 0x80
 80017aa:	d919      	bls.n	80017e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2ba0      	cmp	r3, #160	; 0xa0
 80017b0:	d902      	bls.n	80017b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017b2:	2302      	movs	r3, #2
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	e013      	b.n	80017e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017b8:	2301      	movs	r3, #1
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	e010      	b.n	80017e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b80      	cmp	r3, #128	; 0x80
 80017c2:	d902      	bls.n	80017ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017c4:	2303      	movs	r3, #3
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	e00a      	b.n	80017e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b80      	cmp	r3, #128	; 0x80
 80017ce:	d102      	bne.n	80017d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017d0:	2302      	movs	r3, #2
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	e004      	b.n	80017e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b70      	cmp	r3, #112	; 0x70
 80017da:	d101      	bne.n	80017e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017dc:	2301      	movs	r3, #1
 80017de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f023 0207 	bic.w	r2, r3, #7
 80017e8:	4909      	ldr	r1, [pc, #36]	; (8001810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d001      	beq.n	8001802 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40021000 	.word	0x40021000
 8001810:	40022000 	.word	0x40022000

08001814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e049      	b.n	80018ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d106      	bne.n	8001840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7fe fe8a 	bl	8000554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2202      	movs	r2, #2
 8001844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3304      	adds	r3, #4
 8001850:	4619      	mov	r1, r3
 8001852:	4610      	mov	r0, r2
 8001854:	f000 f9ee 	bl	8001c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d001      	beq.n	80018dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e04f      	b.n	800197c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2202      	movs	r2, #2
 80018e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0201 	orr.w	r2, r2, #1
 80018f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a23      	ldr	r2, [pc, #140]	; (8001988 <HAL_TIM_Base_Start_IT+0xc4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d01d      	beq.n	800193a <HAL_TIM_Base_Start_IT+0x76>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001906:	d018      	beq.n	800193a <HAL_TIM_Base_Start_IT+0x76>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a1f      	ldr	r2, [pc, #124]	; (800198c <HAL_TIM_Base_Start_IT+0xc8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d013      	beq.n	800193a <HAL_TIM_Base_Start_IT+0x76>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a1e      	ldr	r2, [pc, #120]	; (8001990 <HAL_TIM_Base_Start_IT+0xcc>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d00e      	beq.n	800193a <HAL_TIM_Base_Start_IT+0x76>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a1c      	ldr	r2, [pc, #112]	; (8001994 <HAL_TIM_Base_Start_IT+0xd0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d009      	beq.n	800193a <HAL_TIM_Base_Start_IT+0x76>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <HAL_TIM_Base_Start_IT+0xd4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d004      	beq.n	800193a <HAL_TIM_Base_Start_IT+0x76>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a19      	ldr	r2, [pc, #100]	; (800199c <HAL_TIM_Base_Start_IT+0xd8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d115      	bne.n	8001966 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001942:	4013      	ands	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2b06      	cmp	r3, #6
 800194a:	d015      	beq.n	8001978 <HAL_TIM_Base_Start_IT+0xb4>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001952:	d011      	beq.n	8001978 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0201 	orr.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001964:	e008      	b.n	8001978 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f042 0201 	orr.w	r2, r2, #1
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	e000      	b.n	800197a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001978:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	40012c00 	.word	0x40012c00
 800198c:	40000400 	.word	0x40000400
 8001990:	40000800 	.word	0x40000800
 8001994:	40000c00 	.word	0x40000c00
 8001998:	40013400 	.word	0x40013400
 800199c:	40014000 	.word	0x40014000
 80019a0:	00010007 	.word	0x00010007

080019a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d122      	bne.n	8001a00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d11b      	bne.n	8001a00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f06f 0202 	mvn.w	r2, #2
 80019d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 f905 	bl	8001bf6 <HAL_TIM_IC_CaptureCallback>
 80019ec:	e005      	b.n	80019fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f8f7 	bl	8001be2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f908 	bl	8001c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d122      	bne.n	8001a54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d11b      	bne.n	8001a54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f06f 0204 	mvn.w	r2, #4
 8001a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f8db 	bl	8001bf6 <HAL_TIM_IC_CaptureCallback>
 8001a40:	e005      	b.n	8001a4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f8cd 	bl	8001be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f8de 	bl	8001c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d122      	bne.n	8001aa8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d11b      	bne.n	8001aa8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f06f 0208 	mvn.w	r2, #8
 8001a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f8b1 	bl	8001bf6 <HAL_TIM_IC_CaptureCallback>
 8001a94:	e005      	b.n	8001aa2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f8a3 	bl	8001be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f8b4 	bl	8001c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	2b10      	cmp	r3, #16
 8001ab4:	d122      	bne.n	8001afc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f003 0310 	and.w	r3, r3, #16
 8001ac0:	2b10      	cmp	r3, #16
 8001ac2:	d11b      	bne.n	8001afc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f06f 0210 	mvn.w	r2, #16
 8001acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f887 	bl	8001bf6 <HAL_TIM_IC_CaptureCallback>
 8001ae8:	e005      	b.n	8001af6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f879 	bl	8001be2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f88a 	bl	8001c0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d10e      	bne.n	8001b28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d107      	bne.n	8001b28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f06f 0201 	mvn.w	r2, #1
 8001b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7fe fcb6 	bl	8000494 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b32:	2b80      	cmp	r3, #128	; 0x80
 8001b34:	d10e      	bne.n	8001b54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b40:	2b80      	cmp	r3, #128	; 0x80
 8001b42:	d107      	bne.n	8001b54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f914 	bl	8001d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b62:	d10e      	bne.n	8001b82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6e:	2b80      	cmp	r3, #128	; 0x80
 8001b70:	d107      	bne.n	8001b82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f907 	bl	8001d90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8c:	2b40      	cmp	r3, #64	; 0x40
 8001b8e:	d10e      	bne.n	8001bae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9a:	2b40      	cmp	r3, #64	; 0x40
 8001b9c:	d107      	bne.n	8001bae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f838 	bl	8001c1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	f003 0320 	and.w	r3, r3, #32
 8001bb8:	2b20      	cmp	r3, #32
 8001bba:	d10e      	bne.n	8001bda <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f003 0320 	and.w	r3, r3, #32
 8001bc6:	2b20      	cmp	r3, #32
 8001bc8:	d107      	bne.n	8001bda <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f06f 0220 	mvn.w	r2, #32
 8001bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f8c7 	bl	8001d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a40      	ldr	r2, [pc, #256]	; (8001d48 <TIM_Base_SetConfig+0x114>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d013      	beq.n	8001c74 <TIM_Base_SetConfig+0x40>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c52:	d00f      	beq.n	8001c74 <TIM_Base_SetConfig+0x40>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a3d      	ldr	r2, [pc, #244]	; (8001d4c <TIM_Base_SetConfig+0x118>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d00b      	beq.n	8001c74 <TIM_Base_SetConfig+0x40>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a3c      	ldr	r2, [pc, #240]	; (8001d50 <TIM_Base_SetConfig+0x11c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d007      	beq.n	8001c74 <TIM_Base_SetConfig+0x40>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a3b      	ldr	r2, [pc, #236]	; (8001d54 <TIM_Base_SetConfig+0x120>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d003      	beq.n	8001c74 <TIM_Base_SetConfig+0x40>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a3a      	ldr	r2, [pc, #232]	; (8001d58 <TIM_Base_SetConfig+0x124>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d108      	bne.n	8001c86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a2f      	ldr	r2, [pc, #188]	; (8001d48 <TIM_Base_SetConfig+0x114>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d01f      	beq.n	8001cce <TIM_Base_SetConfig+0x9a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c94:	d01b      	beq.n	8001cce <TIM_Base_SetConfig+0x9a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a2c      	ldr	r2, [pc, #176]	; (8001d4c <TIM_Base_SetConfig+0x118>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d017      	beq.n	8001cce <TIM_Base_SetConfig+0x9a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a2b      	ldr	r2, [pc, #172]	; (8001d50 <TIM_Base_SetConfig+0x11c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d013      	beq.n	8001cce <TIM_Base_SetConfig+0x9a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a2a      	ldr	r2, [pc, #168]	; (8001d54 <TIM_Base_SetConfig+0x120>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00f      	beq.n	8001cce <TIM_Base_SetConfig+0x9a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a29      	ldr	r2, [pc, #164]	; (8001d58 <TIM_Base_SetConfig+0x124>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d00b      	beq.n	8001cce <TIM_Base_SetConfig+0x9a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a28      	ldr	r2, [pc, #160]	; (8001d5c <TIM_Base_SetConfig+0x128>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d007      	beq.n	8001cce <TIM_Base_SetConfig+0x9a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a27      	ldr	r2, [pc, #156]	; (8001d60 <TIM_Base_SetConfig+0x12c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d003      	beq.n	8001cce <TIM_Base_SetConfig+0x9a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a26      	ldr	r2, [pc, #152]	; (8001d64 <TIM_Base_SetConfig+0x130>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d108      	bne.n	8001ce0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a10      	ldr	r2, [pc, #64]	; (8001d48 <TIM_Base_SetConfig+0x114>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d00f      	beq.n	8001d2c <TIM_Base_SetConfig+0xf8>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a12      	ldr	r2, [pc, #72]	; (8001d58 <TIM_Base_SetConfig+0x124>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d00b      	beq.n	8001d2c <TIM_Base_SetConfig+0xf8>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a11      	ldr	r2, [pc, #68]	; (8001d5c <TIM_Base_SetConfig+0x128>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d007      	beq.n	8001d2c <TIM_Base_SetConfig+0xf8>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a10      	ldr	r2, [pc, #64]	; (8001d60 <TIM_Base_SetConfig+0x12c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d003      	beq.n	8001d2c <TIM_Base_SetConfig+0xf8>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <TIM_Base_SetConfig+0x130>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d103      	bne.n	8001d34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	615a      	str	r2, [r3, #20]
}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40012c00 	.word	0x40012c00
 8001d4c:	40000400 	.word	0x40000400
 8001d50:	40000800 	.word	0x40000800
 8001d54:	40000c00 	.word	0x40000c00
 8001d58:	40013400 	.word	0x40013400
 8001d5c:	40014000 	.word	0x40014000
 8001d60:	40014400 	.word	0x40014400
 8001d64:	40014800 	.word	0x40014800

08001d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e016      	b.n	8001de4 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7fe fbf2 	bl	80005a0 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dc8:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	ea42 0103 	orr.w	r1, r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <__NVIC_SetPriority>:
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db0a      	blt.n	8001e16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	490c      	ldr	r1, [pc, #48]	; (8001e38 <__NVIC_SetPriority+0x4c>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e14:	e00a      	b.n	8001e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4908      	ldr	r1, [pc, #32]	; (8001e3c <__NVIC_SetPriority+0x50>)
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	3b04      	subs	r3, #4
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	440b      	add	r3, r1
 8001e2a:	761a      	strb	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000e100 	.word	0xe000e100
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001e44:	2100      	movs	r1, #0
 8001e46:	f06f 0004 	mvn.w	r0, #4
 8001e4a:	f7ff ffcf 	bl	8001dec <__NVIC_SetPriority>
#endif
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e5a:	f3ef 8305 	mrs	r3, IPSR
 8001e5e:	603b      	str	r3, [r7, #0]
  return(result);
 8001e60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001e66:	f06f 0305 	mvn.w	r3, #5
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	e00c      	b.n	8001e88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <osKernelInitialize+0x44>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d105      	bne.n	8001e82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001e76:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <osKernelInitialize+0x44>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	e002      	b.n	8001e88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
 8001e86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e88:	687b      	ldr	r3, [r7, #4]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000160 	.word	0x20000160

08001e9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ea2:	f3ef 8305 	mrs	r3, IPSR
 8001ea6:	603b      	str	r3, [r7, #0]
  return(result);
 8001ea8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001eae:	f06f 0305 	mvn.w	r3, #5
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	e010      	b.n	8001ed8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <osKernelStart+0x48>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d109      	bne.n	8001ed2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001ebe:	f7ff ffbf 	bl	8001e40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <osKernelStart+0x48>)
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001ec8:	f001 f87c 	bl	8002fc4 <vTaskStartScheduler>
      stat = osOK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	e002      	b.n	8001ed8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001ed8:	687b      	ldr	r3, [r7, #4]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000160 	.word	0x20000160

08001ee8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08e      	sub	sp, #56	; 0x38
 8001eec:	af04      	add	r7, sp, #16
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ef8:	f3ef 8305 	mrs	r3, IPSR
 8001efc:	617b      	str	r3, [r7, #20]
  return(result);
 8001efe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d17e      	bne.n	8002002 <osThreadNew+0x11a>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d07b      	beq.n	8002002 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001f0e:	2318      	movs	r3, #24
 8001f10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d045      	beq.n	8001fae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <osThreadNew+0x48>
        name = attr->name;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d008      	beq.n	8001f56 <osThreadNew+0x6e>
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	2b38      	cmp	r3, #56	; 0x38
 8001f48:	d805      	bhi.n	8001f56 <osThreadNew+0x6e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <osThreadNew+0x72>
        return (NULL);
 8001f56:	2300      	movs	r3, #0
 8001f58:	e054      	b.n	8002004 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00e      	beq.n	8001f90 <osThreadNew+0xa8>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2bbb      	cmp	r3, #187	; 0xbb
 8001f78:	d90a      	bls.n	8001f90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d006      	beq.n	8001f90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <osThreadNew+0xa8>
        mem = 1;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	61bb      	str	r3, [r7, #24]
 8001f8e:	e010      	b.n	8001fb2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10c      	bne.n	8001fb2 <osThreadNew+0xca>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d108      	bne.n	8001fb2 <osThreadNew+0xca>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d104      	bne.n	8001fb2 <osThreadNew+0xca>
          mem = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	e001      	b.n	8001fb2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d110      	bne.n	8001fda <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001fc0:	9202      	str	r2, [sp, #8]
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	6a3a      	ldr	r2, [r7, #32]
 8001fcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 fe0c 	bl	8002bec <xTaskCreateStatic>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	e013      	b.n	8002002 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d110      	bne.n	8002002 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	f107 0310 	add.w	r3, r7, #16
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 fe57 	bl	8002ca6 <xTaskCreate>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d001      	beq.n	8002002 <osThreadNew+0x11a>
            hTask = NULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002002:	693b      	ldr	r3, [r7, #16]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3728      	adds	r7, #40	; 0x28
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002014:	f3ef 8305 	mrs	r3, IPSR
 8002018:	60bb      	str	r3, [r7, #8]
  return(result);
 800201a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <osDelay+0x1c>
    stat = osErrorISR;
 8002020:	f06f 0305 	mvn.w	r3, #5
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	e007      	b.n	8002038 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 ff92 	bl	8002f5c <vTaskDelay>
    }
  }

  return (stat);
 8002038:	68fb      	ldr	r3, [r7, #12]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4a07      	ldr	r2, [pc, #28]	; (8002070 <vApplicationGetIdleTaskMemory+0x2c>)
 8002054:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	4a06      	ldr	r2, [pc, #24]	; (8002074 <vApplicationGetIdleTaskMemory+0x30>)
 800205a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2280      	movs	r2, #128	; 0x80
 8002060:	601a      	str	r2, [r3, #0]
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000164 	.word	0x20000164
 8002074:	20000220 	.word	0x20000220

08002078 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002088:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	4a06      	ldr	r2, [pc, #24]	; (80020a8 <vApplicationGetTimerTaskMemory+0x30>)
 800208e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002096:	601a      	str	r2, [r3, #0]
}
 8002098:	bf00      	nop
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	20000420 	.word	0x20000420
 80020a8:	200004dc 	.word	0x200004dc

080020ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f103 0208 	add.w	r2, r3, #8
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f04f 32ff 	mov.w	r2, #4294967295
 80020c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f103 0208 	add.w	r2, r3, #8
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f103 0208 	add.w	r2, r3, #8
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002106:	b480      	push	{r7}
 8002108:	b085      	sub	sp, #20
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	601a      	str	r2, [r3, #0]
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800214e:	b480      	push	{r7}
 8002150:	b085      	sub	sp, #20
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d103      	bne.n	800216e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	e00c      	b.n	8002188 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3308      	adds	r3, #8
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	e002      	b.n	800217c <vListInsert+0x2e>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	429a      	cmp	r2, r3
 8002186:	d2f6      	bcs.n	8002176 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	601a      	str	r2, [r3, #0]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6892      	ldr	r2, [r2, #8]
 80021d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6852      	ldr	r2, [r2, #4]
 80021e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d103      	bne.n	80021f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	1e5a      	subs	r2, r3, #1
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10a      	bne.n	800223e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800222c:	f383 8811 	msr	BASEPRI, r3
 8002230:	f3bf 8f6f 	isb	sy
 8002234:	f3bf 8f4f 	dsb	sy
 8002238:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800223a:	bf00      	nop
 800223c:	e7fe      	b.n	800223c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800223e:	f002 f879 	bl	8004334 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224a:	68f9      	ldr	r1, [r7, #12]
 800224c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	441a      	add	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226e:	3b01      	subs	r3, #1
 8002270:	68f9      	ldr	r1, [r7, #12]
 8002272:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	441a      	add	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	22ff      	movs	r2, #255	; 0xff
 8002282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	22ff      	movs	r2, #255	; 0xff
 800228a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d114      	bne.n	80022be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01a      	beq.n	80022d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	3310      	adds	r3, #16
 80022a0:	4618      	mov	r0, r3
 80022a2:	f001 f929 	bl	80034f8 <xTaskRemoveFromEventList>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d012      	beq.n	80022d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <xQueueGenericReset+0xcc>)
 80022ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	f3bf 8f6f 	isb	sy
 80022bc:	e009      	b.n	80022d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	3310      	adds	r3, #16
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fef2 	bl	80020ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3324      	adds	r3, #36	; 0x24
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff feed 	bl	80020ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80022d2:	f002 f85f 	bl	8004394 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80022d6:	2301      	movs	r3, #1
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	e000ed04 	.word	0xe000ed04

080022e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08e      	sub	sp, #56	; 0x38
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10a      	bne.n	800230e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80022f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022fc:	f383 8811 	msr	BASEPRI, r3
 8002300:	f3bf 8f6f 	isb	sy
 8002304:	f3bf 8f4f 	dsb	sy
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800230a:	bf00      	nop
 800230c:	e7fe      	b.n	800230c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10a      	bne.n	800232a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002318:	f383 8811 	msr	BASEPRI, r3
 800231c:	f3bf 8f6f 	isb	sy
 8002320:	f3bf 8f4f 	dsb	sy
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002326:	bf00      	nop
 8002328:	e7fe      	b.n	8002328 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d002      	beq.n	8002336 <xQueueGenericCreateStatic+0x52>
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <xQueueGenericCreateStatic+0x56>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <xQueueGenericCreateStatic+0x58>
 800233a:	2300      	movs	r3, #0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10a      	bne.n	8002356 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002344:	f383 8811 	msr	BASEPRI, r3
 8002348:	f3bf 8f6f 	isb	sy
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	623b      	str	r3, [r7, #32]
}
 8002352:	bf00      	nop
 8002354:	e7fe      	b.n	8002354 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <xQueueGenericCreateStatic+0x7e>
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <xQueueGenericCreateStatic+0x82>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <xQueueGenericCreateStatic+0x84>
 8002366:	2300      	movs	r3, #0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10a      	bne.n	8002382 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800236c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002370:	f383 8811 	msr	BASEPRI, r3
 8002374:	f3bf 8f6f 	isb	sy
 8002378:	f3bf 8f4f 	dsb	sy
 800237c:	61fb      	str	r3, [r7, #28]
}
 800237e:	bf00      	nop
 8002380:	e7fe      	b.n	8002380 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002382:	2350      	movs	r3, #80	; 0x50
 8002384:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b50      	cmp	r3, #80	; 0x50
 800238a:	d00a      	beq.n	80023a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800238c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002390:	f383 8811 	msr	BASEPRI, r3
 8002394:	f3bf 8f6f 	isb	sy
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	61bb      	str	r3, [r7, #24]
}
 800239e:	bf00      	nop
 80023a0:	e7fe      	b.n	80023a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80023a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80023a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00d      	beq.n	80023ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80023ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80023ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	4613      	mov	r3, r2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	68b9      	ldr	r1, [r7, #8]
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f805 	bl	80023d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80023ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3730      	adds	r7, #48	; 0x30
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d103      	bne.n	80023f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	e002      	b.n	80023f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002402:	2101      	movs	r1, #1
 8002404:	69b8      	ldr	r0, [r7, #24]
 8002406:	f7ff ff05 	bl	8002214 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08e      	sub	sp, #56	; 0x38
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800242a:	2300      	movs	r3, #0
 800242c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10a      	bne.n	800244e <xQueueGenericSend+0x32>
	__asm volatile
 8002438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243c:	f383 8811 	msr	BASEPRI, r3
 8002440:	f3bf 8f6f 	isb	sy
 8002444:	f3bf 8f4f 	dsb	sy
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800244a:	bf00      	nop
 800244c:	e7fe      	b.n	800244c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d103      	bne.n	800245c <xQueueGenericSend+0x40>
 8002454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <xQueueGenericSend+0x44>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <xQueueGenericSend+0x46>
 8002460:	2300      	movs	r3, #0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10a      	bne.n	800247c <xQueueGenericSend+0x60>
	__asm volatile
 8002466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246a:	f383 8811 	msr	BASEPRI, r3
 800246e:	f3bf 8f6f 	isb	sy
 8002472:	f3bf 8f4f 	dsb	sy
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002478:	bf00      	nop
 800247a:	e7fe      	b.n	800247a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d103      	bne.n	800248a <xQueueGenericSend+0x6e>
 8002482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <xQueueGenericSend+0x72>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <xQueueGenericSend+0x74>
 800248e:	2300      	movs	r3, #0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10a      	bne.n	80024aa <xQueueGenericSend+0x8e>
	__asm volatile
 8002494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002498:	f383 8811 	msr	BASEPRI, r3
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	623b      	str	r3, [r7, #32]
}
 80024a6:	bf00      	nop
 80024a8:	e7fe      	b.n	80024a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024aa:	f001 f9e7 	bl	800387c <xTaskGetSchedulerState>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d102      	bne.n	80024ba <xQueueGenericSend+0x9e>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <xQueueGenericSend+0xa2>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <xQueueGenericSend+0xa4>
 80024be:	2300      	movs	r3, #0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10a      	bne.n	80024da <xQueueGenericSend+0xbe>
	__asm volatile
 80024c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c8:	f383 8811 	msr	BASEPRI, r3
 80024cc:	f3bf 8f6f 	isb	sy
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	61fb      	str	r3, [r7, #28]
}
 80024d6:	bf00      	nop
 80024d8:	e7fe      	b.n	80024d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80024da:	f001 ff2b 	bl	8004334 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d302      	bcc.n	80024f0 <xQueueGenericSend+0xd4>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d129      	bne.n	8002544 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	68b9      	ldr	r1, [r7, #8]
 80024f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024f6:	f000 fa0b 	bl	8002910 <prvCopyDataToQueue>
 80024fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	2b00      	cmp	r3, #0
 8002502:	d010      	beq.n	8002526 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002506:	3324      	adds	r3, #36	; 0x24
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fff5 	bl	80034f8 <xTaskRemoveFromEventList>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d013      	beq.n	800253c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002514:	4b3f      	ldr	r3, [pc, #252]	; (8002614 <xQueueGenericSend+0x1f8>)
 8002516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	e00a      	b.n	800253c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800252c:	4b39      	ldr	r3, [pc, #228]	; (8002614 <xQueueGenericSend+0x1f8>)
 800252e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800253c:	f001 ff2a 	bl	8004394 <vPortExitCritical>
				return pdPASS;
 8002540:	2301      	movs	r3, #1
 8002542:	e063      	b.n	800260c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d103      	bne.n	8002552 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800254a:	f001 ff23 	bl	8004394 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800254e:	2300      	movs	r3, #0
 8002550:	e05c      	b.n	800260c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002554:	2b00      	cmp	r3, #0
 8002556:	d106      	bne.n	8002566 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	4618      	mov	r0, r3
 800255e:	f001 f82f 	bl	80035c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002562:	2301      	movs	r3, #1
 8002564:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002566:	f001 ff15 	bl	8004394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800256a:	f000 fd9b 	bl	80030a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800256e:	f001 fee1 	bl	8004334 <vPortEnterCritical>
 8002572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002578:	b25b      	sxtb	r3, r3
 800257a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257e:	d103      	bne.n	8002588 <xQueueGenericSend+0x16c>
 8002580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800258e:	b25b      	sxtb	r3, r3
 8002590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002594:	d103      	bne.n	800259e <xQueueGenericSend+0x182>
 8002596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800259e:	f001 fef9 	bl	8004394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025a2:	1d3a      	adds	r2, r7, #4
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f001 f81e 	bl	80035ec <xTaskCheckForTimeOut>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d124      	bne.n	8002600 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025b8:	f000 faa2 	bl	8002b00 <prvIsQueueFull>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d018      	beq.n	80025f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c4:	3310      	adds	r3, #16
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 ff44 	bl	8003458 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80025d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025d2:	f000 fa2d 	bl	8002a30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80025d6:	f000 fd73 	bl	80030c0 <xTaskResumeAll>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f47f af7c 	bne.w	80024da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <xQueueGenericSend+0x1f8>)
 80025e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	f3bf 8f4f 	dsb	sy
 80025ee:	f3bf 8f6f 	isb	sy
 80025f2:	e772      	b.n	80024da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80025f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025f6:	f000 fa1b 	bl	8002a30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025fa:	f000 fd61 	bl	80030c0 <xTaskResumeAll>
 80025fe:	e76c      	b.n	80024da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002602:	f000 fa15 	bl	8002a30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002606:	f000 fd5b 	bl	80030c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800260a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800260c:	4618      	mov	r0, r3
 800260e:	3738      	adds	r7, #56	; 0x38
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	e000ed04 	.word	0xe000ed04

08002618 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b090      	sub	sp, #64	; 0x40
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800262a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10a      	bne.n	8002646 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002634:	f383 8811 	msr	BASEPRI, r3
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002642:	bf00      	nop
 8002644:	e7fe      	b.n	8002644 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d103      	bne.n	8002654 <xQueueGenericSendFromISR+0x3c>
 800264c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <xQueueGenericSendFromISR+0x40>
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <xQueueGenericSendFromISR+0x42>
 8002658:	2300      	movs	r3, #0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10a      	bne.n	8002674 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800265e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002662:	f383 8811 	msr	BASEPRI, r3
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002670:	bf00      	nop
 8002672:	e7fe      	b.n	8002672 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d103      	bne.n	8002682 <xQueueGenericSendFromISR+0x6a>
 800267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <xQueueGenericSendFromISR+0x6e>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <xQueueGenericSendFromISR+0x70>
 8002686:	2300      	movs	r3, #0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10a      	bne.n	80026a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800268c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002690:	f383 8811 	msr	BASEPRI, r3
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	623b      	str	r3, [r7, #32]
}
 800269e:	bf00      	nop
 80026a0:	e7fe      	b.n	80026a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026a2:	f001 ff29 	bl	80044f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026a6:	f3ef 8211 	mrs	r2, BASEPRI
 80026aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ae:	f383 8811 	msr	BASEPRI, r3
 80026b2:	f3bf 8f6f 	isb	sy
 80026b6:	f3bf 8f4f 	dsb	sy
 80026ba:	61fa      	str	r2, [r7, #28]
 80026bc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80026be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d302      	bcc.n	80026d4 <xQueueGenericSendFromISR+0xbc>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d12f      	bne.n	8002734 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80026d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	68b9      	ldr	r1, [r7, #8]
 80026e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026ea:	f000 f911 	bl	8002910 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80026ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80026f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f6:	d112      	bne.n	800271e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d016      	beq.n	800272e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002702:	3324      	adds	r3, #36	; 0x24
 8002704:	4618      	mov	r0, r3
 8002706:	f000 fef7 	bl	80034f8 <xTaskRemoveFromEventList>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00e      	beq.n	800272e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	e007      	b.n	800272e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800271e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002722:	3301      	adds	r3, #1
 8002724:	b2db      	uxtb	r3, r3
 8002726:	b25a      	sxtb	r2, r3
 8002728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800272e:	2301      	movs	r3, #1
 8002730:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002732:	e001      	b.n	8002738 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002734:	2300      	movs	r3, #0
 8002736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002742:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002746:	4618      	mov	r0, r3
 8002748:	3740      	adds	r7, #64	; 0x40
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08c      	sub	sp, #48	; 0x30
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800275c:	2300      	movs	r3, #0
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10a      	bne.n	8002780 <xQueueReceive+0x30>
	__asm volatile
 800276a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276e:	f383 8811 	msr	BASEPRI, r3
 8002772:	f3bf 8f6f 	isb	sy
 8002776:	f3bf 8f4f 	dsb	sy
 800277a:	623b      	str	r3, [r7, #32]
}
 800277c:	bf00      	nop
 800277e:	e7fe      	b.n	800277e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d103      	bne.n	800278e <xQueueReceive+0x3e>
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <xQueueReceive+0x42>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <xQueueReceive+0x44>
 8002792:	2300      	movs	r3, #0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10a      	bne.n	80027ae <xQueueReceive+0x5e>
	__asm volatile
 8002798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279c:	f383 8811 	msr	BASEPRI, r3
 80027a0:	f3bf 8f6f 	isb	sy
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	61fb      	str	r3, [r7, #28]
}
 80027aa:	bf00      	nop
 80027ac:	e7fe      	b.n	80027ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027ae:	f001 f865 	bl	800387c <xTaskGetSchedulerState>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d102      	bne.n	80027be <xQueueReceive+0x6e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <xQueueReceive+0x72>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <xQueueReceive+0x74>
 80027c2:	2300      	movs	r3, #0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10a      	bne.n	80027de <xQueueReceive+0x8e>
	__asm volatile
 80027c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027cc:	f383 8811 	msr	BASEPRI, r3
 80027d0:	f3bf 8f6f 	isb	sy
 80027d4:	f3bf 8f4f 	dsb	sy
 80027d8:	61bb      	str	r3, [r7, #24]
}
 80027da:	bf00      	nop
 80027dc:	e7fe      	b.n	80027dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80027de:	f001 fda9 	bl	8004334 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01f      	beq.n	800282e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027ee:	68b9      	ldr	r1, [r7, #8]
 80027f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027f2:	f000 f8f7 	bl	80029e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	1e5a      	subs	r2, r3, #1
 80027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00f      	beq.n	8002826 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002808:	3310      	adds	r3, #16
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fe74 	bl	80034f8 <xTaskRemoveFromEventList>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d007      	beq.n	8002826 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002816:	4b3d      	ldr	r3, [pc, #244]	; (800290c <xQueueReceive+0x1bc>)
 8002818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	f3bf 8f4f 	dsb	sy
 8002822:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002826:	f001 fdb5 	bl	8004394 <vPortExitCritical>
				return pdPASS;
 800282a:	2301      	movs	r3, #1
 800282c:	e069      	b.n	8002902 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d103      	bne.n	800283c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002834:	f001 fdae 	bl	8004394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002838:	2300      	movs	r3, #0
 800283a:	e062      	b.n	8002902 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002842:	f107 0310 	add.w	r3, r7, #16
 8002846:	4618      	mov	r0, r3
 8002848:	f000 feba 	bl	80035c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800284c:	2301      	movs	r3, #1
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002850:	f001 fda0 	bl	8004394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002854:	f000 fc26 	bl	80030a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002858:	f001 fd6c 	bl	8004334 <vPortEnterCritical>
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002862:	b25b      	sxtb	r3, r3
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d103      	bne.n	8002872 <xQueueReceive+0x122>
 800286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002878:	b25b      	sxtb	r3, r3
 800287a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287e:	d103      	bne.n	8002888 <xQueueReceive+0x138>
 8002880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002888:	f001 fd84 	bl	8004394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800288c:	1d3a      	adds	r2, r7, #4
 800288e:	f107 0310 	add.w	r3, r7, #16
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f000 fea9 	bl	80035ec <xTaskCheckForTimeOut>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d123      	bne.n	80028e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028a2:	f000 f917 	bl	8002ad4 <prvIsQueueEmpty>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d017      	beq.n	80028dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ae:	3324      	adds	r3, #36	; 0x24
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fdcf 	bl	8003458 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028bc:	f000 f8b8 	bl	8002a30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80028c0:	f000 fbfe 	bl	80030c0 <xTaskResumeAll>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d189      	bne.n	80027de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <xQueueReceive+0x1bc>)
 80028cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	f3bf 8f6f 	isb	sy
 80028da:	e780      	b.n	80027de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80028dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028de:	f000 f8a7 	bl	8002a30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028e2:	f000 fbed 	bl	80030c0 <xTaskResumeAll>
 80028e6:	e77a      	b.n	80027de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80028e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ea:	f000 f8a1 	bl	8002a30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028ee:	f000 fbe7 	bl	80030c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028f4:	f000 f8ee 	bl	8002ad4 <prvIsQueueEmpty>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f43f af6f 	beq.w	80027de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002900:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002902:	4618      	mov	r0, r3
 8002904:	3730      	adds	r7, #48	; 0x30
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	e000ed04 	.word	0xe000ed04

08002910 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002924:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10d      	bne.n	800294a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d14d      	bne.n	80029d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	4618      	mov	r0, r3
 800293c:	f000 ffbc 	bl	80038b8 <xTaskPriorityDisinherit>
 8002940:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	e043      	b.n	80029d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d119      	bne.n	8002984 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6858      	ldr	r0, [r3, #4]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	461a      	mov	r2, r3
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	f002 f81c 	bl	8004998 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	441a      	add	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	429a      	cmp	r2, r3
 8002978:	d32b      	bcc.n	80029d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	e026      	b.n	80029d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	68d8      	ldr	r0, [r3, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	461a      	mov	r2, r3
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	f002 f802 	bl	8004998 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	425b      	negs	r3, r3
 800299e:	441a      	add	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d207      	bcs.n	80029c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	425b      	negs	r3, r3
 80029ba:	441a      	add	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d105      	bne.n	80029d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80029da:	697b      	ldr	r3, [r7, #20]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d018      	beq.n	8002a28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	441a      	add	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d303      	bcc.n	8002a18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68d9      	ldr	r1, [r3, #12]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	461a      	mov	r2, r3
 8002a22:	6838      	ldr	r0, [r7, #0]
 8002a24:	f001 ffb8 	bl	8004998 <memcpy>
	}
}
 8002a28:	bf00      	nop
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a38:	f001 fc7c 	bl	8004334 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a44:	e011      	b.n	8002a6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d012      	beq.n	8002a74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3324      	adds	r3, #36	; 0x24
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 fd50 	bl	80034f8 <xTaskRemoveFromEventList>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a5e:	f000 fe27 	bl	80036b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	dce9      	bgt.n	8002a46 <prvUnlockQueue+0x16>
 8002a72:	e000      	b.n	8002a76 <prvUnlockQueue+0x46>
					break;
 8002a74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	22ff      	movs	r2, #255	; 0xff
 8002a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002a7e:	f001 fc89 	bl	8004394 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a82:	f001 fc57 	bl	8004334 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a8e:	e011      	b.n	8002ab4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d012      	beq.n	8002abe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3310      	adds	r3, #16
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 fd2b 	bl	80034f8 <xTaskRemoveFromEventList>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002aa8:	f000 fe02 	bl	80036b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002aac:	7bbb      	ldrb	r3, [r7, #14]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ab4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	dce9      	bgt.n	8002a90 <prvUnlockQueue+0x60>
 8002abc:	e000      	b.n	8002ac0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002abe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	22ff      	movs	r2, #255	; 0xff
 8002ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002ac8:	f001 fc64 	bl	8004394 <vPortExitCritical>
}
 8002acc:	bf00      	nop
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002adc:	f001 fc2a 	bl	8004334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d102      	bne.n	8002aee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	e001      	b.n	8002af2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002af2:	f001 fc4f 	bl	8004394 <vPortExitCritical>

	return xReturn;
 8002af6:	68fb      	ldr	r3, [r7, #12]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b08:	f001 fc14 	bl	8004334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d102      	bne.n	8002b1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	e001      	b.n	8002b22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b22:	f001 fc37 	bl	8004394 <vPortExitCritical>

	return xReturn;
 8002b26:	68fb      	ldr	r3, [r7, #12]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	e014      	b.n	8002b6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b40:	4a0f      	ldr	r2, [pc, #60]	; (8002b80 <vQueueAddToRegistry+0x50>)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10b      	bne.n	8002b64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b4c:	490c      	ldr	r1, [pc, #48]	; (8002b80 <vQueueAddToRegistry+0x50>)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b56:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <vQueueAddToRegistry+0x50>)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b62:	e006      	b.n	8002b72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	3301      	adds	r3, #1
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b07      	cmp	r3, #7
 8002b6e:	d9e7      	bls.n	8002b40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002b70:	bf00      	nop
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	200008dc 	.word	0x200008dc

08002b84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b94:	f001 fbce 	bl	8004334 <vPortEnterCritical>
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b9e:	b25b      	sxtb	r3, r3
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba4:	d103      	bne.n	8002bae <vQueueWaitForMessageRestricted+0x2a>
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bb4:	b25b      	sxtb	r3, r3
 8002bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bba:	d103      	bne.n	8002bc4 <vQueueWaitForMessageRestricted+0x40>
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bc4:	f001 fbe6 	bl	8004394 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d106      	bne.n	8002bde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	3324      	adds	r3, #36	; 0x24
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 fc61 	bl	80034a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002bde:	6978      	ldr	r0, [r7, #20]
 8002be0:	f7ff ff26 	bl	8002a30 <prvUnlockQueue>
	}
 8002be4:	bf00      	nop
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08e      	sub	sp, #56	; 0x38
 8002bf0:	af04      	add	r7, sp, #16
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10a      	bne.n	8002c16 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c04:	f383 8811 	msr	BASEPRI, r3
 8002c08:	f3bf 8f6f 	isb	sy
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	623b      	str	r3, [r7, #32]
}
 8002c12:	bf00      	nop
 8002c14:	e7fe      	b.n	8002c14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10a      	bne.n	8002c32 <xTaskCreateStatic+0x46>
	__asm volatile
 8002c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c20:	f383 8811 	msr	BASEPRI, r3
 8002c24:	f3bf 8f6f 	isb	sy
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	61fb      	str	r3, [r7, #28]
}
 8002c2e:	bf00      	nop
 8002c30:	e7fe      	b.n	8002c30 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c32:	23bc      	movs	r3, #188	; 0xbc
 8002c34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	2bbc      	cmp	r3, #188	; 0xbc
 8002c3a:	d00a      	beq.n	8002c52 <xTaskCreateStatic+0x66>
	__asm volatile
 8002c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c40:	f383 8811 	msr	BASEPRI, r3
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	61bb      	str	r3, [r7, #24]
}
 8002c4e:	bf00      	nop
 8002c50:	e7fe      	b.n	8002c50 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c52:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d01e      	beq.n	8002c98 <xTaskCreateStatic+0xac>
 8002c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01b      	beq.n	8002c98 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c72:	2300      	movs	r3, #0
 8002c74:	9303      	str	r3, [sp, #12]
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	9302      	str	r3, [sp, #8]
 8002c7a:	f107 0314 	add.w	r3, r7, #20
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f850 	bl	8002d30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c92:	f000 f8f3 	bl	8002e7c <prvAddNewTaskToReadyList>
 8002c96:	e001      	b.n	8002c9c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c9c:	697b      	ldr	r3, [r7, #20]
	}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3728      	adds	r7, #40	; 0x28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b08c      	sub	sp, #48	; 0x30
 8002caa:	af04      	add	r7, sp, #16
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f001 fc5c 	bl	8004578 <pvPortMalloc>
 8002cc0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00e      	beq.n	8002ce6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cc8:	20bc      	movs	r0, #188	; 0xbc
 8002cca:	f001 fc55 	bl	8004578 <pvPortMalloc>
 8002cce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
 8002cdc:	e005      	b.n	8002cea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002cde:	6978      	ldr	r0, [r7, #20]
 8002ce0:	f001 fd16 	bl	8004710 <vPortFree>
 8002ce4:	e001      	b.n	8002cea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d017      	beq.n	8002d20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cf8:	88fa      	ldrh	r2, [r7, #6]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	9303      	str	r3, [sp, #12]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	9302      	str	r3, [sp, #8]
 8002d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f80e 	bl	8002d30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d14:	69f8      	ldr	r0, [r7, #28]
 8002d16:	f000 f8b1 	bl	8002e7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	e002      	b.n	8002d26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
 8002d24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d26:	69bb      	ldr	r3, [r7, #24]
	}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3720      	adds	r7, #32
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	461a      	mov	r2, r3
 8002d48:	21a5      	movs	r1, #165	; 0xa5
 8002d4a:	f001 fe33 	bl	80049b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	f023 0307 	bic.w	r3, r3, #7
 8002d66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	617b      	str	r3, [r7, #20]
}
 8002d84:	bf00      	nop
 8002d86:	e7fe      	b.n	8002d86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d01f      	beq.n	8002dce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
 8002d92:	e012      	b.n	8002dba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	4413      	add	r3, r2
 8002d9a:	7819      	ldrb	r1, [r3, #0]
 8002d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	4413      	add	r3, r2
 8002da2:	3334      	adds	r3, #52	; 0x34
 8002da4:	460a      	mov	r2, r1
 8002da6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	4413      	add	r3, r2
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d006      	beq.n	8002dc2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	3301      	adds	r3, #1
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	2b0f      	cmp	r3, #15
 8002dbe:	d9e9      	bls.n	8002d94 <prvInitialiseNewTask+0x64>
 8002dc0:	e000      	b.n	8002dc4 <prvInitialiseNewTask+0x94>
			{
				break;
 8002dc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dcc:	e003      	b.n	8002dd6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd8:	2b37      	cmp	r3, #55	; 0x37
 8002dda:	d901      	bls.n	8002de0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ddc:	2337      	movs	r3, #55	; 0x37
 8002dde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002de4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	2200      	movs	r2, #0
 8002df0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df4:	3304      	adds	r3, #4
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff f978 	bl	80020ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	3318      	adds	r3, #24
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff f973 	bl	80020ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	3354      	adds	r3, #84	; 0x54
 8002e30:	2260      	movs	r2, #96	; 0x60
 8002e32:	2100      	movs	r1, #0
 8002e34:	4618      	mov	r0, r3
 8002e36:	f001 fdbd 	bl	80049b4 <memset>
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3c:	4a0c      	ldr	r2, [pc, #48]	; (8002e70 <prvInitialiseNewTask+0x140>)
 8002e3e:	659a      	str	r2, [r3, #88]	; 0x58
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	4a0c      	ldr	r2, [pc, #48]	; (8002e74 <prvInitialiseNewTask+0x144>)
 8002e44:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e48:	4a0b      	ldr	r2, [pc, #44]	; (8002e78 <prvInitialiseNewTask+0x148>)
 8002e4a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	68f9      	ldr	r1, [r7, #12]
 8002e50:	69b8      	ldr	r0, [r7, #24]
 8002e52:	f001 f941 	bl	80040d8 <pxPortInitialiseStack>
 8002e56:	4602      	mov	r2, r0
 8002e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e68:	bf00      	nop
 8002e6a:	3720      	adds	r7, #32
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	0800544c 	.word	0x0800544c
 8002e74:	0800546c 	.word	0x0800546c
 8002e78:	0800542c 	.word	0x0800542c

08002e7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e84:	f001 fa56 	bl	8004334 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e88:	4b2d      	ldr	r3, [pc, #180]	; (8002f40 <prvAddNewTaskToReadyList+0xc4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	4a2c      	ldr	r2, [pc, #176]	; (8002f40 <prvAddNewTaskToReadyList+0xc4>)
 8002e90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e92:	4b2c      	ldr	r3, [pc, #176]	; (8002f44 <prvAddNewTaskToReadyList+0xc8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e9a:	4a2a      	ldr	r2, [pc, #168]	; (8002f44 <prvAddNewTaskToReadyList+0xc8>)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ea0:	4b27      	ldr	r3, [pc, #156]	; (8002f40 <prvAddNewTaskToReadyList+0xc4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d110      	bne.n	8002eca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ea8:	f000 fc26 	bl	80036f8 <prvInitialiseTaskLists>
 8002eac:	e00d      	b.n	8002eca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002eae:	4b26      	ldr	r3, [pc, #152]	; (8002f48 <prvAddNewTaskToReadyList+0xcc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d109      	bne.n	8002eca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002eb6:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <prvAddNewTaskToReadyList+0xc8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d802      	bhi.n	8002eca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ec4:	4a1f      	ldr	r2, [pc, #124]	; (8002f44 <prvAddNewTaskToReadyList+0xc8>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002eca:	4b20      	ldr	r3, [pc, #128]	; (8002f4c <prvAddNewTaskToReadyList+0xd0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	4a1e      	ldr	r2, [pc, #120]	; (8002f4c <prvAddNewTaskToReadyList+0xd0>)
 8002ed2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <prvAddNewTaskToReadyList+0xd0>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee0:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <prvAddNewTaskToReadyList+0xd4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d903      	bls.n	8002ef0 <prvAddNewTaskToReadyList+0x74>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	4a18      	ldr	r2, [pc, #96]	; (8002f50 <prvAddNewTaskToReadyList+0xd4>)
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4a15      	ldr	r2, [pc, #84]	; (8002f54 <prvAddNewTaskToReadyList+0xd8>)
 8002efe:	441a      	add	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3304      	adds	r3, #4
 8002f04:	4619      	mov	r1, r3
 8002f06:	4610      	mov	r0, r2
 8002f08:	f7ff f8fd 	bl	8002106 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f0c:	f001 fa42 	bl	8004394 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f10:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <prvAddNewTaskToReadyList+0xcc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00e      	beq.n	8002f36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f18:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <prvAddNewTaskToReadyList+0xc8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d207      	bcs.n	8002f36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f26:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <prvAddNewTaskToReadyList+0xdc>)
 8002f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000df0 	.word	0x20000df0
 8002f44:	2000091c 	.word	0x2000091c
 8002f48:	20000dfc 	.word	0x20000dfc
 8002f4c:	20000e0c 	.word	0x20000e0c
 8002f50:	20000df8 	.word	0x20000df8
 8002f54:	20000920 	.word	0x20000920
 8002f58:	e000ed04 	.word	0xe000ed04

08002f5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d017      	beq.n	8002f9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f6e:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <vTaskDelay+0x60>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <vTaskDelay+0x30>
	__asm volatile
 8002f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	60bb      	str	r3, [r7, #8]
}
 8002f88:	bf00      	nop
 8002f8a:	e7fe      	b.n	8002f8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f8c:	f000 f88a 	bl	80030a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f90:	2100      	movs	r1, #0
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fcfe 	bl	8003994 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f98:	f000 f892 	bl	80030c0 <xTaskResumeAll>
 8002f9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d107      	bne.n	8002fb4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <vTaskDelay+0x64>)
 8002fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20000e18 	.word	0x20000e18
 8002fc0:	e000ed04 	.word	0xe000ed04

08002fc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	; 0x28
 8002fc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002fd2:	463a      	mov	r2, r7
 8002fd4:	1d39      	adds	r1, r7, #4
 8002fd6:	f107 0308 	add.w	r3, r7, #8
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff f832 	bl	8002044 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002fe0:	6839      	ldr	r1, [r7, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	9202      	str	r2, [sp, #8]
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	2300      	movs	r3, #0
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	460a      	mov	r2, r1
 8002ff2:	4924      	ldr	r1, [pc, #144]	; (8003084 <vTaskStartScheduler+0xc0>)
 8002ff4:	4824      	ldr	r0, [pc, #144]	; (8003088 <vTaskStartScheduler+0xc4>)
 8002ff6:	f7ff fdf9 	bl	8002bec <xTaskCreateStatic>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4a23      	ldr	r2, [pc, #140]	; (800308c <vTaskStartScheduler+0xc8>)
 8002ffe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003000:	4b22      	ldr	r3, [pc, #136]	; (800308c <vTaskStartScheduler+0xc8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003008:	2301      	movs	r3, #1
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	e001      	b.n	8003012 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d102      	bne.n	800301e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003018:	f000 fd10 	bl	8003a3c <xTimerCreateTimerTask>
 800301c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d11b      	bne.n	800305c <vTaskStartScheduler+0x98>
	__asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	613b      	str	r3, [r7, #16]
}
 8003036:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003038:	4b15      	ldr	r3, [pc, #84]	; (8003090 <vTaskStartScheduler+0xcc>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3354      	adds	r3, #84	; 0x54
 800303e:	4a15      	ldr	r2, [pc, #84]	; (8003094 <vTaskStartScheduler+0xd0>)
 8003040:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <vTaskStartScheduler+0xd4>)
 8003044:	f04f 32ff 	mov.w	r2, #4294967295
 8003048:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800304a:	4b14      	ldr	r3, [pc, #80]	; (800309c <vTaskStartScheduler+0xd8>)
 800304c:	2201      	movs	r2, #1
 800304e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003050:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <vTaskStartScheduler+0xdc>)
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003056:	f001 f8cb 	bl	80041f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800305a:	e00e      	b.n	800307a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003062:	d10a      	bne.n	800307a <vTaskStartScheduler+0xb6>
	__asm volatile
 8003064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	60fb      	str	r3, [r7, #12]
}
 8003076:	bf00      	nop
 8003078:	e7fe      	b.n	8003078 <vTaskStartScheduler+0xb4>
}
 800307a:	bf00      	nop
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	080053b0 	.word	0x080053b0
 8003088:	080036c9 	.word	0x080036c9
 800308c:	20000e14 	.word	0x20000e14
 8003090:	2000091c 	.word	0x2000091c
 8003094:	20000010 	.word	0x20000010
 8003098:	20000e10 	.word	0x20000e10
 800309c:	20000dfc 	.word	0x20000dfc
 80030a0:	20000df4 	.word	0x20000df4

080030a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80030a8:	4b04      	ldr	r3, [pc, #16]	; (80030bc <vTaskSuspendAll+0x18>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3301      	adds	r3, #1
 80030ae:	4a03      	ldr	r2, [pc, #12]	; (80030bc <vTaskSuspendAll+0x18>)
 80030b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80030b2:	bf00      	nop
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	20000e18 	.word	0x20000e18

080030c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80030ce:	4b42      	ldr	r3, [pc, #264]	; (80031d8 <xTaskResumeAll+0x118>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10a      	bne.n	80030ec <xTaskResumeAll+0x2c>
	__asm volatile
 80030d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	603b      	str	r3, [r7, #0]
}
 80030e8:	bf00      	nop
 80030ea:	e7fe      	b.n	80030ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80030ec:	f001 f922 	bl	8004334 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80030f0:	4b39      	ldr	r3, [pc, #228]	; (80031d8 <xTaskResumeAll+0x118>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3b01      	subs	r3, #1
 80030f6:	4a38      	ldr	r2, [pc, #224]	; (80031d8 <xTaskResumeAll+0x118>)
 80030f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030fa:	4b37      	ldr	r3, [pc, #220]	; (80031d8 <xTaskResumeAll+0x118>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d162      	bne.n	80031c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003102:	4b36      	ldr	r3, [pc, #216]	; (80031dc <xTaskResumeAll+0x11c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d05e      	beq.n	80031c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800310a:	e02f      	b.n	800316c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800310c:	4b34      	ldr	r3, [pc, #208]	; (80031e0 <xTaskResumeAll+0x120>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	3318      	adds	r3, #24
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff f851 	bl	80021c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	3304      	adds	r3, #4
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff f84c 	bl	80021c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312c:	4b2d      	ldr	r3, [pc, #180]	; (80031e4 <xTaskResumeAll+0x124>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d903      	bls.n	800313c <xTaskResumeAll+0x7c>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	4a2a      	ldr	r2, [pc, #168]	; (80031e4 <xTaskResumeAll+0x124>)
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4a27      	ldr	r2, [pc, #156]	; (80031e8 <xTaskResumeAll+0x128>)
 800314a:	441a      	add	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3304      	adds	r3, #4
 8003150:	4619      	mov	r1, r3
 8003152:	4610      	mov	r0, r2
 8003154:	f7fe ffd7 	bl	8002106 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315c:	4b23      	ldr	r3, [pc, #140]	; (80031ec <xTaskResumeAll+0x12c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	429a      	cmp	r2, r3
 8003164:	d302      	bcc.n	800316c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003166:	4b22      	ldr	r3, [pc, #136]	; (80031f0 <xTaskResumeAll+0x130>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800316c:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <xTaskResumeAll+0x120>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1cb      	bne.n	800310c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800317a:	f000 fb5f 	bl	800383c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800317e:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <xTaskResumeAll+0x134>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d010      	beq.n	80031ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800318a:	f000 f847 	bl	800321c <xTaskIncrementTick>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003194:	4b16      	ldr	r3, [pc, #88]	; (80031f0 <xTaskResumeAll+0x130>)
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3b01      	subs	r3, #1
 800319e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f1      	bne.n	800318a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80031a6:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <xTaskResumeAll+0x134>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80031ac:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <xTaskResumeAll+0x130>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d009      	beq.n	80031c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80031b4:	2301      	movs	r3, #1
 80031b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80031b8:	4b0f      	ldr	r3, [pc, #60]	; (80031f8 <xTaskResumeAll+0x138>)
 80031ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	f3bf 8f4f 	dsb	sy
 80031c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80031c8:	f001 f8e4 	bl	8004394 <vPortExitCritical>

	return xAlreadyYielded;
 80031cc:	68bb      	ldr	r3, [r7, #8]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000e18 	.word	0x20000e18
 80031dc:	20000df0 	.word	0x20000df0
 80031e0:	20000db0 	.word	0x20000db0
 80031e4:	20000df8 	.word	0x20000df8
 80031e8:	20000920 	.word	0x20000920
 80031ec:	2000091c 	.word	0x2000091c
 80031f0:	20000e04 	.word	0x20000e04
 80031f4:	20000e00 	.word	0x20000e00
 80031f8:	e000ed04 	.word	0xe000ed04

080031fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <xTaskGetTickCount+0x1c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003208:	687b      	ldr	r3, [r7, #4]
}
 800320a:	4618      	mov	r0, r3
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	20000df4 	.word	0x20000df4

0800321c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003226:	4b4f      	ldr	r3, [pc, #316]	; (8003364 <xTaskIncrementTick+0x148>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f040 808f 	bne.w	800334e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003230:	4b4d      	ldr	r3, [pc, #308]	; (8003368 <xTaskIncrementTick+0x14c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3301      	adds	r3, #1
 8003236:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003238:	4a4b      	ldr	r2, [pc, #300]	; (8003368 <xTaskIncrementTick+0x14c>)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d120      	bne.n	8003286 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003244:	4b49      	ldr	r3, [pc, #292]	; (800336c <xTaskIncrementTick+0x150>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <xTaskIncrementTick+0x48>
	__asm volatile
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	603b      	str	r3, [r7, #0]
}
 8003260:	bf00      	nop
 8003262:	e7fe      	b.n	8003262 <xTaskIncrementTick+0x46>
 8003264:	4b41      	ldr	r3, [pc, #260]	; (800336c <xTaskIncrementTick+0x150>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	4b41      	ldr	r3, [pc, #260]	; (8003370 <xTaskIncrementTick+0x154>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a3f      	ldr	r2, [pc, #252]	; (800336c <xTaskIncrementTick+0x150>)
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	4a3f      	ldr	r2, [pc, #252]	; (8003370 <xTaskIncrementTick+0x154>)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	4b3e      	ldr	r3, [pc, #248]	; (8003374 <xTaskIncrementTick+0x158>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3301      	adds	r3, #1
 800327e:	4a3d      	ldr	r2, [pc, #244]	; (8003374 <xTaskIncrementTick+0x158>)
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	f000 fadb 	bl	800383c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003286:	4b3c      	ldr	r3, [pc, #240]	; (8003378 <xTaskIncrementTick+0x15c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	429a      	cmp	r2, r3
 800328e:	d349      	bcc.n	8003324 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003290:	4b36      	ldr	r3, [pc, #216]	; (800336c <xTaskIncrementTick+0x150>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d104      	bne.n	80032a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800329a:	4b37      	ldr	r3, [pc, #220]	; (8003378 <xTaskIncrementTick+0x15c>)
 800329c:	f04f 32ff 	mov.w	r2, #4294967295
 80032a0:	601a      	str	r2, [r3, #0]
					break;
 80032a2:	e03f      	b.n	8003324 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032a4:	4b31      	ldr	r3, [pc, #196]	; (800336c <xTaskIncrementTick+0x150>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d203      	bcs.n	80032c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80032bc:	4a2e      	ldr	r2, [pc, #184]	; (8003378 <xTaskIncrementTick+0x15c>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80032c2:	e02f      	b.n	8003324 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	3304      	adds	r3, #4
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe ff79 	bl	80021c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d004      	beq.n	80032e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	3318      	adds	r3, #24
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe ff70 	bl	80021c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e4:	4b25      	ldr	r3, [pc, #148]	; (800337c <xTaskIncrementTick+0x160>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d903      	bls.n	80032f4 <xTaskIncrementTick+0xd8>
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	4a22      	ldr	r2, [pc, #136]	; (800337c <xTaskIncrementTick+0x160>)
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4a1f      	ldr	r2, [pc, #124]	; (8003380 <xTaskIncrementTick+0x164>)
 8003302:	441a      	add	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	3304      	adds	r3, #4
 8003308:	4619      	mov	r1, r3
 800330a:	4610      	mov	r0, r2
 800330c:	f7fe fefb 	bl	8002106 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003314:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <xTaskIncrementTick+0x168>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	429a      	cmp	r2, r3
 800331c:	d3b8      	bcc.n	8003290 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800331e:	2301      	movs	r3, #1
 8003320:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003322:	e7b5      	b.n	8003290 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003324:	4b17      	ldr	r3, [pc, #92]	; (8003384 <xTaskIncrementTick+0x168>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332a:	4915      	ldr	r1, [pc, #84]	; (8003380 <xTaskIncrementTick+0x164>)
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d901      	bls.n	8003340 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800333c:	2301      	movs	r3, #1
 800333e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003340:	4b11      	ldr	r3, [pc, #68]	; (8003388 <xTaskIncrementTick+0x16c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d007      	beq.n	8003358 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003348:	2301      	movs	r3, #1
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	e004      	b.n	8003358 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800334e:	4b0f      	ldr	r3, [pc, #60]	; (800338c <xTaskIncrementTick+0x170>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	4a0d      	ldr	r2, [pc, #52]	; (800338c <xTaskIncrementTick+0x170>)
 8003356:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003358:	697b      	ldr	r3, [r7, #20]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000e18 	.word	0x20000e18
 8003368:	20000df4 	.word	0x20000df4
 800336c:	20000da8 	.word	0x20000da8
 8003370:	20000dac 	.word	0x20000dac
 8003374:	20000e08 	.word	0x20000e08
 8003378:	20000e10 	.word	0x20000e10
 800337c:	20000df8 	.word	0x20000df8
 8003380:	20000920 	.word	0x20000920
 8003384:	2000091c 	.word	0x2000091c
 8003388:	20000e04 	.word	0x20000e04
 800338c:	20000e00 	.word	0x20000e00

08003390 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003396:	4b2a      	ldr	r3, [pc, #168]	; (8003440 <vTaskSwitchContext+0xb0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800339e:	4b29      	ldr	r3, [pc, #164]	; (8003444 <vTaskSwitchContext+0xb4>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80033a4:	e046      	b.n	8003434 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80033a6:	4b27      	ldr	r3, [pc, #156]	; (8003444 <vTaskSwitchContext+0xb4>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033ac:	4b26      	ldr	r3, [pc, #152]	; (8003448 <vTaskSwitchContext+0xb8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	e010      	b.n	80033d6 <vTaskSwitchContext+0x46>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10a      	bne.n	80033d0 <vTaskSwitchContext+0x40>
	__asm volatile
 80033ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	607b      	str	r3, [r7, #4]
}
 80033cc:	bf00      	nop
 80033ce:	e7fe      	b.n	80033ce <vTaskSwitchContext+0x3e>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	491d      	ldr	r1, [pc, #116]	; (800344c <vTaskSwitchContext+0xbc>)
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0e4      	beq.n	80033b4 <vTaskSwitchContext+0x24>
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4a15      	ldr	r2, [pc, #84]	; (800344c <vTaskSwitchContext+0xbc>)
 80033f6:	4413      	add	r3, r2
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	605a      	str	r2, [r3, #4]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	3308      	adds	r3, #8
 800340c:	429a      	cmp	r2, r3
 800340e:	d104      	bne.n	800341a <vTaskSwitchContext+0x8a>
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	4a0b      	ldr	r2, [pc, #44]	; (8003450 <vTaskSwitchContext+0xc0>)
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	4a08      	ldr	r2, [pc, #32]	; (8003448 <vTaskSwitchContext+0xb8>)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800342a:	4b09      	ldr	r3, [pc, #36]	; (8003450 <vTaskSwitchContext+0xc0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3354      	adds	r3, #84	; 0x54
 8003430:	4a08      	ldr	r2, [pc, #32]	; (8003454 <vTaskSwitchContext+0xc4>)
 8003432:	6013      	str	r3, [r2, #0]
}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	20000e18 	.word	0x20000e18
 8003444:	20000e04 	.word	0x20000e04
 8003448:	20000df8 	.word	0x20000df8
 800344c:	20000920 	.word	0x20000920
 8003450:	2000091c 	.word	0x2000091c
 8003454:	20000010 	.word	0x20000010

08003458 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	60fb      	str	r3, [r7, #12]
}
 800347a:	bf00      	nop
 800347c:	e7fe      	b.n	800347c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800347e:	4b07      	ldr	r3, [pc, #28]	; (800349c <vTaskPlaceOnEventList+0x44>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3318      	adds	r3, #24
 8003484:	4619      	mov	r1, r3
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fe fe61 	bl	800214e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800348c:	2101      	movs	r1, #1
 800348e:	6838      	ldr	r0, [r7, #0]
 8003490:	f000 fa80 	bl	8003994 <prvAddCurrentTaskToDelayedList>
}
 8003494:	bf00      	nop
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	2000091c 	.word	0x2000091c

080034a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10a      	bne.n	80034c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80034b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b6:	f383 8811 	msr	BASEPRI, r3
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	617b      	str	r3, [r7, #20]
}
 80034c4:	bf00      	nop
 80034c6:	e7fe      	b.n	80034c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034c8:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3318      	adds	r3, #24
 80034ce:	4619      	mov	r1, r3
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f7fe fe18 	bl	8002106 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80034dc:	f04f 33ff 	mov.w	r3, #4294967295
 80034e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	68b8      	ldr	r0, [r7, #8]
 80034e6:	f000 fa55 	bl	8003994 <prvAddCurrentTaskToDelayedList>
	}
 80034ea:	bf00      	nop
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	2000091c 	.word	0x2000091c

080034f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10a      	bne.n	8003524 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800350e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	60fb      	str	r3, [r7, #12]
}
 8003520:	bf00      	nop
 8003522:	e7fe      	b.n	8003522 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	3318      	adds	r3, #24
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe fe49 	bl	80021c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800352e:	4b1e      	ldr	r3, [pc, #120]	; (80035a8 <xTaskRemoveFromEventList+0xb0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d11d      	bne.n	8003572 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	3304      	adds	r3, #4
 800353a:	4618      	mov	r0, r3
 800353c:	f7fe fe40 	bl	80021c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003544:	4b19      	ldr	r3, [pc, #100]	; (80035ac <xTaskRemoveFromEventList+0xb4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d903      	bls.n	8003554 <xTaskRemoveFromEventList+0x5c>
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	4a16      	ldr	r2, [pc, #88]	; (80035ac <xTaskRemoveFromEventList+0xb4>)
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4a13      	ldr	r2, [pc, #76]	; (80035b0 <xTaskRemoveFromEventList+0xb8>)
 8003562:	441a      	add	r2, r3
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	3304      	adds	r3, #4
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f7fe fdcb 	bl	8002106 <vListInsertEnd>
 8003570:	e005      	b.n	800357e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	3318      	adds	r3, #24
 8003576:	4619      	mov	r1, r3
 8003578:	480e      	ldr	r0, [pc, #56]	; (80035b4 <xTaskRemoveFromEventList+0xbc>)
 800357a:	f7fe fdc4 	bl	8002106 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003582:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <xTaskRemoveFromEventList+0xc0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	429a      	cmp	r2, r3
 800358a:	d905      	bls.n	8003598 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800358c:	2301      	movs	r3, #1
 800358e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003590:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <xTaskRemoveFromEventList+0xc4>)
 8003592:	2201      	movs	r2, #1
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	e001      	b.n	800359c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800359c:	697b      	ldr	r3, [r7, #20]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000e18 	.word	0x20000e18
 80035ac:	20000df8 	.word	0x20000df8
 80035b0:	20000920 	.word	0x20000920
 80035b4:	20000db0 	.word	0x20000db0
 80035b8:	2000091c 	.word	0x2000091c
 80035bc:	20000e04 	.word	0x20000e04

080035c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035c8:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <vTaskInternalSetTimeOutState+0x24>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <vTaskInternalSetTimeOutState+0x28>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	605a      	str	r2, [r3, #4]
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	20000e08 	.word	0x20000e08
 80035e8:	20000df4 	.word	0x20000df4

080035ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10a      	bne.n	8003612 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80035fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	613b      	str	r3, [r7, #16]
}
 800360e:	bf00      	nop
 8003610:	e7fe      	b.n	8003610 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10a      	bne.n	800362e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	60fb      	str	r3, [r7, #12]
}
 800362a:	bf00      	nop
 800362c:	e7fe      	b.n	800362c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800362e:	f000 fe81 	bl	8004334 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003632:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <xTaskCheckForTimeOut+0xbc>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364a:	d102      	bne.n	8003652 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800364c:	2300      	movs	r3, #0
 800364e:	61fb      	str	r3, [r7, #28]
 8003650:	e023      	b.n	800369a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	4b15      	ldr	r3, [pc, #84]	; (80036ac <xTaskCheckForTimeOut+0xc0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d007      	beq.n	800366e <xTaskCheckForTimeOut+0x82>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	429a      	cmp	r2, r3
 8003666:	d302      	bcc.n	800366e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003668:	2301      	movs	r3, #1
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	e015      	b.n	800369a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	429a      	cmp	r2, r3
 8003676:	d20b      	bcs.n	8003690 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	1ad2      	subs	r2, r2, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff ff9b 	bl	80035c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	e004      	b.n	800369a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003696:	2301      	movs	r3, #1
 8003698:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800369a:	f000 fe7b 	bl	8004394 <vPortExitCritical>

	return xReturn;
 800369e:	69fb      	ldr	r3, [r7, #28]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3720      	adds	r7, #32
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	20000df4 	.word	0x20000df4
 80036ac:	20000e08 	.word	0x20000e08

080036b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80036b4:	4b03      	ldr	r3, [pc, #12]	; (80036c4 <vTaskMissedYield+0x14>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
}
 80036ba:	bf00      	nop
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	20000e04 	.word	0x20000e04

080036c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80036d0:	f000 f852 	bl	8003778 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <prvIdleTask+0x28>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d9f9      	bls.n	80036d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <prvIdleTask+0x2c>)
 80036de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80036ec:	e7f0      	b.n	80036d0 <prvIdleTask+0x8>
 80036ee:	bf00      	nop
 80036f0:	20000920 	.word	0x20000920
 80036f4:	e000ed04 	.word	0xe000ed04

080036f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036fe:	2300      	movs	r3, #0
 8003700:	607b      	str	r3, [r7, #4]
 8003702:	e00c      	b.n	800371e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4a12      	ldr	r2, [pc, #72]	; (8003758 <prvInitialiseTaskLists+0x60>)
 8003710:	4413      	add	r3, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe fcca 	bl	80020ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3301      	adds	r3, #1
 800371c:	607b      	str	r3, [r7, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b37      	cmp	r3, #55	; 0x37
 8003722:	d9ef      	bls.n	8003704 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003724:	480d      	ldr	r0, [pc, #52]	; (800375c <prvInitialiseTaskLists+0x64>)
 8003726:	f7fe fcc1 	bl	80020ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800372a:	480d      	ldr	r0, [pc, #52]	; (8003760 <prvInitialiseTaskLists+0x68>)
 800372c:	f7fe fcbe 	bl	80020ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003730:	480c      	ldr	r0, [pc, #48]	; (8003764 <prvInitialiseTaskLists+0x6c>)
 8003732:	f7fe fcbb 	bl	80020ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003736:	480c      	ldr	r0, [pc, #48]	; (8003768 <prvInitialiseTaskLists+0x70>)
 8003738:	f7fe fcb8 	bl	80020ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800373c:	480b      	ldr	r0, [pc, #44]	; (800376c <prvInitialiseTaskLists+0x74>)
 800373e:	f7fe fcb5 	bl	80020ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <prvInitialiseTaskLists+0x78>)
 8003744:	4a05      	ldr	r2, [pc, #20]	; (800375c <prvInitialiseTaskLists+0x64>)
 8003746:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003748:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <prvInitialiseTaskLists+0x7c>)
 800374a:	4a05      	ldr	r2, [pc, #20]	; (8003760 <prvInitialiseTaskLists+0x68>)
 800374c:	601a      	str	r2, [r3, #0]
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20000920 	.word	0x20000920
 800375c:	20000d80 	.word	0x20000d80
 8003760:	20000d94 	.word	0x20000d94
 8003764:	20000db0 	.word	0x20000db0
 8003768:	20000dc4 	.word	0x20000dc4
 800376c:	20000ddc 	.word	0x20000ddc
 8003770:	20000da8 	.word	0x20000da8
 8003774:	20000dac 	.word	0x20000dac

08003778 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800377e:	e019      	b.n	80037b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003780:	f000 fdd8 	bl	8004334 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003784:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <prvCheckTasksWaitingTermination+0x50>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3304      	adds	r3, #4
 8003790:	4618      	mov	r0, r3
 8003792:	f7fe fd15 	bl	80021c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003796:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <prvCheckTasksWaitingTermination+0x54>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	3b01      	subs	r3, #1
 800379c:	4a0b      	ldr	r2, [pc, #44]	; (80037cc <prvCheckTasksWaitingTermination+0x54>)
 800379e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <prvCheckTasksWaitingTermination+0x58>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <prvCheckTasksWaitingTermination+0x58>)
 80037a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80037aa:	f000 fdf3 	bl	8004394 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f810 	bl	80037d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037b4:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <prvCheckTasksWaitingTermination+0x58>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1e1      	bne.n	8003780 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80037bc:	bf00      	nop
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000dc4 	.word	0x20000dc4
 80037cc:	20000df0 	.word	0x20000df0
 80037d0:	20000dd8 	.word	0x20000dd8

080037d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3354      	adds	r3, #84	; 0x54
 80037e0:	4618      	mov	r0, r3
 80037e2:	f001 f991 	bl	8004b08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d108      	bne.n	8003802 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 ff8b 	bl	8004710 <vPortFree>
				vPortFree( pxTCB );
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 ff88 	bl	8004710 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003800:	e018      	b.n	8003834 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003808:	2b01      	cmp	r3, #1
 800380a:	d103      	bne.n	8003814 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 ff7f 	bl	8004710 <vPortFree>
	}
 8003812:	e00f      	b.n	8003834 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800381a:	2b02      	cmp	r3, #2
 800381c:	d00a      	beq.n	8003834 <prvDeleteTCB+0x60>
	__asm volatile
 800381e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	60fb      	str	r3, [r7, #12]
}
 8003830:	bf00      	nop
 8003832:	e7fe      	b.n	8003832 <prvDeleteTCB+0x5e>
	}
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003842:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <prvResetNextTaskUnblockTime+0x38>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d104      	bne.n	8003856 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800384c:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <prvResetNextTaskUnblockTime+0x3c>)
 800384e:	f04f 32ff 	mov.w	r2, #4294967295
 8003852:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003854:	e008      	b.n	8003868 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003856:	4b07      	ldr	r3, [pc, #28]	; (8003874 <prvResetNextTaskUnblockTime+0x38>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	4a04      	ldr	r2, [pc, #16]	; (8003878 <prvResetNextTaskUnblockTime+0x3c>)
 8003866:	6013      	str	r3, [r2, #0]
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	20000da8 	.word	0x20000da8
 8003878:	20000e10 	.word	0x20000e10

0800387c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003882:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <xTaskGetSchedulerState+0x34>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800388a:	2301      	movs	r3, #1
 800388c:	607b      	str	r3, [r7, #4]
 800388e:	e008      	b.n	80038a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003890:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <xTaskGetSchedulerState+0x38>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d102      	bne.n	800389e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003898:	2302      	movs	r3, #2
 800389a:	607b      	str	r3, [r7, #4]
 800389c:	e001      	b.n	80038a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800389e:	2300      	movs	r3, #0
 80038a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80038a2:	687b      	ldr	r3, [r7, #4]
	}
 80038a4:	4618      	mov	r0, r3
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	20000dfc 	.word	0x20000dfc
 80038b4:	20000e18 	.word	0x20000e18

080038b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d056      	beq.n	800397c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80038ce:	4b2e      	ldr	r3, [pc, #184]	; (8003988 <xTaskPriorityDisinherit+0xd0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d00a      	beq.n	80038ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	60fb      	str	r3, [r7, #12]
}
 80038ea:	bf00      	nop
 80038ec:	e7fe      	b.n	80038ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10a      	bne.n	800390c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80038f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	60bb      	str	r3, [r7, #8]
}
 8003908:	bf00      	nop
 800390a:	e7fe      	b.n	800390a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003910:	1e5a      	subs	r2, r3, #1
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391e:	429a      	cmp	r2, r3
 8003920:	d02c      	beq.n	800397c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003926:	2b00      	cmp	r3, #0
 8003928:	d128      	bne.n	800397c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	3304      	adds	r3, #4
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe fc46 	bl	80021c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394c:	4b0f      	ldr	r3, [pc, #60]	; (800398c <xTaskPriorityDisinherit+0xd4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d903      	bls.n	800395c <xTaskPriorityDisinherit+0xa4>
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	4a0c      	ldr	r2, [pc, #48]	; (800398c <xTaskPriorityDisinherit+0xd4>)
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4a09      	ldr	r2, [pc, #36]	; (8003990 <xTaskPriorityDisinherit+0xd8>)
 800396a:	441a      	add	r2, r3
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	3304      	adds	r3, #4
 8003970:	4619      	mov	r1, r3
 8003972:	4610      	mov	r0, r2
 8003974:	f7fe fbc7 	bl	8002106 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003978:	2301      	movs	r3, #1
 800397a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800397c:	697b      	ldr	r3, [r7, #20]
	}
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	2000091c 	.word	0x2000091c
 800398c:	20000df8 	.word	0x20000df8
 8003990:	20000920 	.word	0x20000920

08003994 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800399e:	4b21      	ldr	r3, [pc, #132]	; (8003a24 <prvAddCurrentTaskToDelayedList+0x90>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039a4:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <prvAddCurrentTaskToDelayedList+0x94>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3304      	adds	r3, #4
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe fc08 	bl	80021c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b6:	d10a      	bne.n	80039ce <prvAddCurrentTaskToDelayedList+0x3a>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039be:	4b1a      	ldr	r3, [pc, #104]	; (8003a28 <prvAddCurrentTaskToDelayedList+0x94>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3304      	adds	r3, #4
 80039c4:	4619      	mov	r1, r3
 80039c6:	4819      	ldr	r0, [pc, #100]	; (8003a2c <prvAddCurrentTaskToDelayedList+0x98>)
 80039c8:	f7fe fb9d 	bl	8002106 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039cc:	e026      	b.n	8003a1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4413      	add	r3, r2
 80039d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039d6:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <prvAddCurrentTaskToDelayedList+0x94>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d209      	bcs.n	80039fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <prvAddCurrentTaskToDelayedList+0x9c>)
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <prvAddCurrentTaskToDelayedList+0x94>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3304      	adds	r3, #4
 80039f0:	4619      	mov	r1, r3
 80039f2:	4610      	mov	r0, r2
 80039f4:	f7fe fbab 	bl	800214e <vListInsert>
}
 80039f8:	e010      	b.n	8003a1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039fa:	4b0e      	ldr	r3, [pc, #56]	; (8003a34 <prvAddCurrentTaskToDelayedList+0xa0>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3304      	adds	r3, #4
 8003a04:	4619      	mov	r1, r3
 8003a06:	4610      	mov	r0, r2
 8003a08:	f7fe fba1 	bl	800214e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a0c:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d202      	bcs.n	8003a1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003a16:	4a08      	ldr	r2, [pc, #32]	; (8003a38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	6013      	str	r3, [r2, #0]
}
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	20000df4 	.word	0x20000df4
 8003a28:	2000091c 	.word	0x2000091c
 8003a2c:	20000ddc 	.word	0x20000ddc
 8003a30:	20000dac 	.word	0x20000dac
 8003a34:	20000da8 	.word	0x20000da8
 8003a38:	20000e10 	.word	0x20000e10

08003a3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	; 0x28
 8003a40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003a46:	f000 fb07 	bl	8004058 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003a4a:	4b1c      	ldr	r3, [pc, #112]	; (8003abc <xTimerCreateTimerTask+0x80>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d021      	beq.n	8003a96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003a5a:	1d3a      	adds	r2, r7, #4
 8003a5c:	f107 0108 	add.w	r1, r7, #8
 8003a60:	f107 030c 	add.w	r3, r7, #12
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fe fb07 	bl	8002078 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	9202      	str	r2, [sp, #8]
 8003a72:	9301      	str	r3, [sp, #4]
 8003a74:	2302      	movs	r3, #2
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	460a      	mov	r2, r1
 8003a7c:	4910      	ldr	r1, [pc, #64]	; (8003ac0 <xTimerCreateTimerTask+0x84>)
 8003a7e:	4811      	ldr	r0, [pc, #68]	; (8003ac4 <xTimerCreateTimerTask+0x88>)
 8003a80:	f7ff f8b4 	bl	8002bec <xTaskCreateStatic>
 8003a84:	4603      	mov	r3, r0
 8003a86:	4a10      	ldr	r2, [pc, #64]	; (8003ac8 <xTimerCreateTimerTask+0x8c>)
 8003a88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003a8a:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <xTimerCreateTimerTask+0x8c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003a92:	2301      	movs	r3, #1
 8003a94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10a      	bne.n	8003ab2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	613b      	str	r3, [r7, #16]
}
 8003aae:	bf00      	nop
 8003ab0:	e7fe      	b.n	8003ab0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003ab2:	697b      	ldr	r3, [r7, #20]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	20000e4c 	.word	0x20000e4c
 8003ac0:	080053b8 	.word	0x080053b8
 8003ac4:	08003c01 	.word	0x08003c01
 8003ac8:	20000e50 	.word	0x20000e50

08003acc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08a      	sub	sp, #40	; 0x28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10a      	bne.n	8003afa <xTimerGenericCommand+0x2e>
	__asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	623b      	str	r3, [r7, #32]
}
 8003af6:	bf00      	nop
 8003af8:	e7fe      	b.n	8003af8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003afa:	4b1a      	ldr	r3, [pc, #104]	; (8003b64 <xTimerGenericCommand+0x98>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d02a      	beq.n	8003b58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b05      	cmp	r3, #5
 8003b12:	dc18      	bgt.n	8003b46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b14:	f7ff feb2 	bl	800387c <xTaskGetSchedulerState>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d109      	bne.n	8003b32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b1e:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <xTimerGenericCommand+0x98>)
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	f107 0110 	add.w	r1, r7, #16
 8003b26:	2300      	movs	r3, #0
 8003b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2a:	f7fe fc77 	bl	800241c <xQueueGenericSend>
 8003b2e:	6278      	str	r0, [r7, #36]	; 0x24
 8003b30:	e012      	b.n	8003b58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b32:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <xTimerGenericCommand+0x98>)
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	f107 0110 	add.w	r1, r7, #16
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f7fe fc6d 	bl	800241c <xQueueGenericSend>
 8003b42:	6278      	str	r0, [r7, #36]	; 0x24
 8003b44:	e008      	b.n	8003b58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b46:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <xTimerGenericCommand+0x98>)
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	f107 0110 	add.w	r1, r7, #16
 8003b4e:	2300      	movs	r3, #0
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	f7fe fd61 	bl	8002618 <xQueueGenericSendFromISR>
 8003b56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3728      	adds	r7, #40	; 0x28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20000e4c 	.word	0x20000e4c

08003b68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b72:	4b22      	ldr	r3, [pc, #136]	; (8003bfc <prvProcessExpiredTimer+0x94>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fe fb1d 	bl	80021c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d022      	beq.n	8003bda <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	699a      	ldr	r2, [r3, #24]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	18d1      	adds	r1, r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	6978      	ldr	r0, [r7, #20]
 8003ba2:	f000 f8d1 	bl	8003d48 <prvInsertTimerInActiveList>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d01f      	beq.n	8003bec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003bac:	2300      	movs	r3, #0
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	6978      	ldr	r0, [r7, #20]
 8003bb8:	f7ff ff88 	bl	8003acc <xTimerGenericCommand>
 8003bbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d113      	bne.n	8003bec <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	60fb      	str	r3, [r7, #12]
}
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003be0:	f023 0301 	bic.w	r3, r3, #1
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	6978      	ldr	r0, [r7, #20]
 8003bf2:	4798      	blx	r3
}
 8003bf4:	bf00      	nop
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20000e44 	.word	0x20000e44

08003c00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c08:	f107 0308 	add.w	r3, r7, #8
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 f857 	bl	8003cc0 <prvGetNextExpireTime>
 8003c12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4619      	mov	r1, r3
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f803 	bl	8003c24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003c1e:	f000 f8d5 	bl	8003dcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c22:	e7f1      	b.n	8003c08 <prvTimerTask+0x8>

08003c24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003c2e:	f7ff fa39 	bl	80030a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c32:	f107 0308 	add.w	r3, r7, #8
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 f866 	bl	8003d08 <prvSampleTimeNow>
 8003c3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d130      	bne.n	8003ca6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10a      	bne.n	8003c60 <prvProcessTimerOrBlockTask+0x3c>
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d806      	bhi.n	8003c60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003c52:	f7ff fa35 	bl	80030c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c56:	68f9      	ldr	r1, [r7, #12]
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff ff85 	bl	8003b68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003c5e:	e024      	b.n	8003caa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d008      	beq.n	8003c78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c66:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <prvProcessTimerOrBlockTask+0x90>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <prvProcessTimerOrBlockTask+0x50>
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <prvProcessTimerOrBlockTask+0x52>
 8003c74:	2300      	movs	r3, #0
 8003c76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c78:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <prvProcessTimerOrBlockTask+0x94>)
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	4619      	mov	r1, r3
 8003c86:	f7fe ff7d 	bl	8002b84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003c8a:	f7ff fa19 	bl	80030c0 <xTaskResumeAll>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003c94:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <prvProcessTimerOrBlockTask+0x98>)
 8003c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	f3bf 8f6f 	isb	sy
}
 8003ca4:	e001      	b.n	8003caa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003ca6:	f7ff fa0b 	bl	80030c0 <xTaskResumeAll>
}
 8003caa:	bf00      	nop
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000e48 	.word	0x20000e48
 8003cb8:	20000e4c 	.word	0x20000e4c
 8003cbc:	e000ed04 	.word	0xe000ed04

08003cc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003cc8:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <prvGetNextExpireTime+0x44>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <prvGetNextExpireTime+0x16>
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	e000      	b.n	8003cd8 <prvGetNextExpireTime+0x18>
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d105      	bne.n	8003cf0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ce4:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <prvGetNextExpireTime+0x44>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	e001      	b.n	8003cf4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	20000e44 	.word	0x20000e44

08003d08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003d10:	f7ff fa74 	bl	80031fc <xTaskGetTickCount>
 8003d14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003d16:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <prvSampleTimeNow+0x3c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d205      	bcs.n	8003d2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003d20:	f000 f936 	bl	8003f90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	e002      	b.n	8003d32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003d32:	4a04      	ldr	r2, [pc, #16]	; (8003d44 <prvSampleTimeNow+0x3c>)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003d38:	68fb      	ldr	r3, [r7, #12]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000e54 	.word	0x20000e54

08003d48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d812      	bhi.n	8003d94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	1ad2      	subs	r2, r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d302      	bcc.n	8003d82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	e01b      	b.n	8003dba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d82:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <prvInsertTimerInActiveList+0x7c>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	f7fe f9de 	bl	800214e <vListInsert>
 8003d92:	e012      	b.n	8003dba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d206      	bcs.n	8003daa <prvInsertTimerInActiveList+0x62>
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d302      	bcc.n	8003daa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003da4:	2301      	movs	r3, #1
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	e007      	b.n	8003dba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003daa:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <prvInsertTimerInActiveList+0x80>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3304      	adds	r3, #4
 8003db2:	4619      	mov	r1, r3
 8003db4:	4610      	mov	r0, r2
 8003db6:	f7fe f9ca 	bl	800214e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003dba:	697b      	ldr	r3, [r7, #20]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	20000e48 	.word	0x20000e48
 8003dc8:	20000e44 	.word	0x20000e44

08003dcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08e      	sub	sp, #56	; 0x38
 8003dd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003dd2:	e0ca      	b.n	8003f6a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	da18      	bge.n	8003e0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003dda:	1d3b      	adds	r3, r7, #4
 8003ddc:	3304      	adds	r3, #4
 8003dde:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10a      	bne.n	8003dfc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	61fb      	str	r3, [r7, #28]
}
 8003df8:	bf00      	nop
 8003dfa:	e7fe      	b.n	8003dfa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e02:	6850      	ldr	r0, [r2, #4]
 8003e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e06:	6892      	ldr	r2, [r2, #8]
 8003e08:	4611      	mov	r1, r2
 8003e0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f2c0 80aa 	blt.w	8003f68 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d004      	beq.n	8003e2a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e22:	3304      	adds	r3, #4
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fe f9cb 	bl	80021c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e2a:	463b      	mov	r3, r7
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff ff6b 	bl	8003d08 <prvSampleTimeNow>
 8003e32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b09      	cmp	r3, #9
 8003e38:	f200 8097 	bhi.w	8003f6a <prvProcessReceivedCommands+0x19e>
 8003e3c:	a201      	add	r2, pc, #4	; (adr r2, 8003e44 <prvProcessReceivedCommands+0x78>)
 8003e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e42:	bf00      	nop
 8003e44:	08003e6d 	.word	0x08003e6d
 8003e48:	08003e6d 	.word	0x08003e6d
 8003e4c:	08003e6d 	.word	0x08003e6d
 8003e50:	08003ee1 	.word	0x08003ee1
 8003e54:	08003ef5 	.word	0x08003ef5
 8003e58:	08003f3f 	.word	0x08003f3f
 8003e5c:	08003e6d 	.word	0x08003e6d
 8003e60:	08003e6d 	.word	0x08003e6d
 8003e64:	08003ee1 	.word	0x08003ee1
 8003e68:	08003ef5 	.word	0x08003ef5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	18d1      	adds	r1, r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e8c:	f7ff ff5c 	bl	8003d48 <prvInsertTimerInActiveList>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d069      	beq.n	8003f6a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d05e      	beq.n	8003f6a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	441a      	add	r2, r3
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	2300      	movs	r3, #0
 8003eba:	2100      	movs	r1, #0
 8003ebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ebe:	f7ff fe05 	bl	8003acc <xTimerGenericCommand>
 8003ec2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d14f      	bne.n	8003f6a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	61bb      	str	r3, [r7, #24]
}
 8003edc:	bf00      	nop
 8003ede:	e7fe      	b.n	8003ede <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ee6:	f023 0301 	bic.w	r3, r3, #1
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003ef2:	e03a      	b.n	8003f6a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10a      	bne.n	8003f2a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	617b      	str	r3, [r7, #20]
}
 8003f26:	bf00      	nop
 8003f28:	e7fe      	b.n	8003f28 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	18d1      	adds	r1, r2, r3
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f38:	f7ff ff06 	bl	8003d48 <prvInsertTimerInActiveList>
					break;
 8003f3c:	e015      	b.n	8003f6a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d103      	bne.n	8003f54 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f4e:	f000 fbdf 	bl	8004710 <vPortFree>
 8003f52:	e00a      	b.n	8003f6a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f5a:	f023 0301 	bic.w	r3, r3, #1
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003f66:	e000      	b.n	8003f6a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003f68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f6a:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <prvProcessReceivedCommands+0x1c0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	1d39      	adds	r1, r7, #4
 8003f70:	2200      	movs	r2, #0
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fe fbec 	bl	8002750 <xQueueReceive>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f47f af2a 	bne.w	8003dd4 <prvProcessReceivedCommands+0x8>
	}
}
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop
 8003f84:	3730      	adds	r7, #48	; 0x30
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000e4c 	.word	0x20000e4c

08003f90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b088      	sub	sp, #32
 8003f94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f96:	e048      	b.n	800402a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f98:	4b2d      	ldr	r3, [pc, #180]	; (8004050 <prvSwitchTimerLists+0xc0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fa2:	4b2b      	ldr	r3, [pc, #172]	; (8004050 <prvSwitchTimerLists+0xc0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fe f905 	bl	80021c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d02e      	beq.n	800402a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d90e      	bls.n	8003ffc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fea:	4b19      	ldr	r3, [pc, #100]	; (8004050 <prvSwitchTimerLists+0xc0>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f7fe f8aa 	bl	800214e <vListInsert>
 8003ffa:	e016      	b.n	800402a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	2300      	movs	r3, #0
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	2100      	movs	r1, #0
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f7ff fd60 	bl	8003acc <xTimerGenericCommand>
 800400c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10a      	bne.n	800402a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	603b      	str	r3, [r7, #0]
}
 8004026:	bf00      	nop
 8004028:	e7fe      	b.n	8004028 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800402a:	4b09      	ldr	r3, [pc, #36]	; (8004050 <prvSwitchTimerLists+0xc0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1b1      	bne.n	8003f98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004034:	4b06      	ldr	r3, [pc, #24]	; (8004050 <prvSwitchTimerLists+0xc0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800403a:	4b06      	ldr	r3, [pc, #24]	; (8004054 <prvSwitchTimerLists+0xc4>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a04      	ldr	r2, [pc, #16]	; (8004050 <prvSwitchTimerLists+0xc0>)
 8004040:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004042:	4a04      	ldr	r2, [pc, #16]	; (8004054 <prvSwitchTimerLists+0xc4>)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	6013      	str	r3, [r2, #0]
}
 8004048:	bf00      	nop
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	20000e44 	.word	0x20000e44
 8004054:	20000e48 	.word	0x20000e48

08004058 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800405e:	f000 f969 	bl	8004334 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004062:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <prvCheckForValidListAndQueue+0x60>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d120      	bne.n	80040ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800406a:	4814      	ldr	r0, [pc, #80]	; (80040bc <prvCheckForValidListAndQueue+0x64>)
 800406c:	f7fe f81e 	bl	80020ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004070:	4813      	ldr	r0, [pc, #76]	; (80040c0 <prvCheckForValidListAndQueue+0x68>)
 8004072:	f7fe f81b 	bl	80020ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004076:	4b13      	ldr	r3, [pc, #76]	; (80040c4 <prvCheckForValidListAndQueue+0x6c>)
 8004078:	4a10      	ldr	r2, [pc, #64]	; (80040bc <prvCheckForValidListAndQueue+0x64>)
 800407a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800407c:	4b12      	ldr	r3, [pc, #72]	; (80040c8 <prvCheckForValidListAndQueue+0x70>)
 800407e:	4a10      	ldr	r2, [pc, #64]	; (80040c0 <prvCheckForValidListAndQueue+0x68>)
 8004080:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004082:	2300      	movs	r3, #0
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	4b11      	ldr	r3, [pc, #68]	; (80040cc <prvCheckForValidListAndQueue+0x74>)
 8004088:	4a11      	ldr	r2, [pc, #68]	; (80040d0 <prvCheckForValidListAndQueue+0x78>)
 800408a:	2110      	movs	r1, #16
 800408c:	200a      	movs	r0, #10
 800408e:	f7fe f929 	bl	80022e4 <xQueueGenericCreateStatic>
 8004092:	4603      	mov	r3, r0
 8004094:	4a08      	ldr	r2, [pc, #32]	; (80040b8 <prvCheckForValidListAndQueue+0x60>)
 8004096:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004098:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <prvCheckForValidListAndQueue+0x60>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <prvCheckForValidListAndQueue+0x60>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	490b      	ldr	r1, [pc, #44]	; (80040d4 <prvCheckForValidListAndQueue+0x7c>)
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fe fd42 	bl	8002b30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040ac:	f000 f972 	bl	8004394 <vPortExitCritical>
}
 80040b0:	bf00      	nop
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20000e4c 	.word	0x20000e4c
 80040bc:	20000e1c 	.word	0x20000e1c
 80040c0:	20000e30 	.word	0x20000e30
 80040c4:	20000e44 	.word	0x20000e44
 80040c8:	20000e48 	.word	0x20000e48
 80040cc:	20000ef8 	.word	0x20000ef8
 80040d0:	20000e58 	.word	0x20000e58
 80040d4:	080053c0 	.word	0x080053c0

080040d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3b04      	subs	r3, #4
 80040e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	3b04      	subs	r3, #4
 80040f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f023 0201 	bic.w	r2, r3, #1
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3b04      	subs	r3, #4
 8004106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004108:	4a0c      	ldr	r2, [pc, #48]	; (800413c <pxPortInitialiseStack+0x64>)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3b14      	subs	r3, #20
 8004112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	3b04      	subs	r3, #4
 800411e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f06f 0202 	mvn.w	r2, #2
 8004126:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3b20      	subs	r3, #32
 800412c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800412e:	68fb      	ldr	r3, [r7, #12]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	08004141 	.word	0x08004141

08004140 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004146:	2300      	movs	r3, #0
 8004148:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800414a:	4b12      	ldr	r3, [pc, #72]	; (8004194 <prvTaskExitError+0x54>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004152:	d00a      	beq.n	800416a <prvTaskExitError+0x2a>
	__asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	60fb      	str	r3, [r7, #12]
}
 8004166:	bf00      	nop
 8004168:	e7fe      	b.n	8004168 <prvTaskExitError+0x28>
	__asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	60bb      	str	r3, [r7, #8]
}
 800417c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800417e:	bf00      	nop
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0fc      	beq.n	8004180 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004186:	bf00      	nop
 8004188:	bf00      	nop
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	2000000c 	.word	0x2000000c
	...

080041a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80041a0:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <pxCurrentTCBConst2>)
 80041a2:	6819      	ldr	r1, [r3, #0]
 80041a4:	6808      	ldr	r0, [r1, #0]
 80041a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041aa:	f380 8809 	msr	PSP, r0
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f04f 0000 	mov.w	r0, #0
 80041b6:	f380 8811 	msr	BASEPRI, r0
 80041ba:	4770      	bx	lr
 80041bc:	f3af 8000 	nop.w

080041c0 <pxCurrentTCBConst2>:
 80041c0:	2000091c 	.word	0x2000091c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop

080041c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80041c8:	4808      	ldr	r0, [pc, #32]	; (80041ec <prvPortStartFirstTask+0x24>)
 80041ca:	6800      	ldr	r0, [r0, #0]
 80041cc:	6800      	ldr	r0, [r0, #0]
 80041ce:	f380 8808 	msr	MSP, r0
 80041d2:	f04f 0000 	mov.w	r0, #0
 80041d6:	f380 8814 	msr	CONTROL, r0
 80041da:	b662      	cpsie	i
 80041dc:	b661      	cpsie	f
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	df00      	svc	0
 80041e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80041ea:	bf00      	nop
 80041ec:	e000ed08 	.word	0xe000ed08

080041f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041f6:	4b46      	ldr	r3, [pc, #280]	; (8004310 <xPortStartScheduler+0x120>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a46      	ldr	r2, [pc, #280]	; (8004314 <xPortStartScheduler+0x124>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d10a      	bne.n	8004216 <xPortStartScheduler+0x26>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	613b      	str	r3, [r7, #16]
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004216:	4b3e      	ldr	r3, [pc, #248]	; (8004310 <xPortStartScheduler+0x120>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a3f      	ldr	r2, [pc, #252]	; (8004318 <xPortStartScheduler+0x128>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d10a      	bne.n	8004236 <xPortStartScheduler+0x46>
	__asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	60fb      	str	r3, [r7, #12]
}
 8004232:	bf00      	nop
 8004234:	e7fe      	b.n	8004234 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004236:	4b39      	ldr	r3, [pc, #228]	; (800431c <xPortStartScheduler+0x12c>)
 8004238:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	22ff      	movs	r2, #255	; 0xff
 8004246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004258:	b2da      	uxtb	r2, r3
 800425a:	4b31      	ldr	r3, [pc, #196]	; (8004320 <xPortStartScheduler+0x130>)
 800425c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800425e:	4b31      	ldr	r3, [pc, #196]	; (8004324 <xPortStartScheduler+0x134>)
 8004260:	2207      	movs	r2, #7
 8004262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004264:	e009      	b.n	800427a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004266:	4b2f      	ldr	r3, [pc, #188]	; (8004324 <xPortStartScheduler+0x134>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3b01      	subs	r3, #1
 800426c:	4a2d      	ldr	r2, [pc, #180]	; (8004324 <xPortStartScheduler+0x134>)
 800426e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	b2db      	uxtb	r3, r3
 8004278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800427a:	78fb      	ldrb	r3, [r7, #3]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004282:	2b80      	cmp	r3, #128	; 0x80
 8004284:	d0ef      	beq.n	8004266 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004286:	4b27      	ldr	r3, [pc, #156]	; (8004324 <xPortStartScheduler+0x134>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f1c3 0307 	rsb	r3, r3, #7
 800428e:	2b04      	cmp	r3, #4
 8004290:	d00a      	beq.n	80042a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	60bb      	str	r3, [r7, #8]
}
 80042a4:	bf00      	nop
 80042a6:	e7fe      	b.n	80042a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042a8:	4b1e      	ldr	r3, [pc, #120]	; (8004324 <xPortStartScheduler+0x134>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	4a1d      	ldr	r2, [pc, #116]	; (8004324 <xPortStartScheduler+0x134>)
 80042b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042b2:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <xPortStartScheduler+0x134>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042ba:	4a1a      	ldr	r2, [pc, #104]	; (8004324 <xPortStartScheduler+0x134>)
 80042bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80042c6:	4b18      	ldr	r3, [pc, #96]	; (8004328 <xPortStartScheduler+0x138>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a17      	ldr	r2, [pc, #92]	; (8004328 <xPortStartScheduler+0x138>)
 80042cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80042d2:	4b15      	ldr	r3, [pc, #84]	; (8004328 <xPortStartScheduler+0x138>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a14      	ldr	r2, [pc, #80]	; (8004328 <xPortStartScheduler+0x138>)
 80042d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80042dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80042de:	f000 f8dd 	bl	800449c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80042e2:	4b12      	ldr	r3, [pc, #72]	; (800432c <xPortStartScheduler+0x13c>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80042e8:	f000 f8fc 	bl	80044e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042ec:	4b10      	ldr	r3, [pc, #64]	; (8004330 <xPortStartScheduler+0x140>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a0f      	ldr	r2, [pc, #60]	; (8004330 <xPortStartScheduler+0x140>)
 80042f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80042f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80042f8:	f7ff ff66 	bl	80041c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80042fc:	f7ff f848 	bl	8003390 <vTaskSwitchContext>
	prvTaskExitError();
 8004300:	f7ff ff1e 	bl	8004140 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	e000ed00 	.word	0xe000ed00
 8004314:	410fc271 	.word	0x410fc271
 8004318:	410fc270 	.word	0x410fc270
 800431c:	e000e400 	.word	0xe000e400
 8004320:	20000f48 	.word	0x20000f48
 8004324:	20000f4c 	.word	0x20000f4c
 8004328:	e000ed20 	.word	0xe000ed20
 800432c:	2000000c 	.word	0x2000000c
 8004330:	e000ef34 	.word	0xe000ef34

08004334 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
	__asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	607b      	str	r3, [r7, #4]
}
 800434c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800434e:	4b0f      	ldr	r3, [pc, #60]	; (800438c <vPortEnterCritical+0x58>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3301      	adds	r3, #1
 8004354:	4a0d      	ldr	r2, [pc, #52]	; (800438c <vPortEnterCritical+0x58>)
 8004356:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004358:	4b0c      	ldr	r3, [pc, #48]	; (800438c <vPortEnterCritical+0x58>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d10f      	bne.n	8004380 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <vPortEnterCritical+0x5c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <vPortEnterCritical+0x4c>
	__asm volatile
 800436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	603b      	str	r3, [r7, #0]
}
 800437c:	bf00      	nop
 800437e:	e7fe      	b.n	800437e <vPortEnterCritical+0x4a>
	}
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	2000000c 	.word	0x2000000c
 8004390:	e000ed04 	.word	0xe000ed04

08004394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800439a:	4b12      	ldr	r3, [pc, #72]	; (80043e4 <vPortExitCritical+0x50>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10a      	bne.n	80043b8 <vPortExitCritical+0x24>
	__asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	607b      	str	r3, [r7, #4]
}
 80043b4:	bf00      	nop
 80043b6:	e7fe      	b.n	80043b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80043b8:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <vPortExitCritical+0x50>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3b01      	subs	r3, #1
 80043be:	4a09      	ldr	r2, [pc, #36]	; (80043e4 <vPortExitCritical+0x50>)
 80043c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80043c2:	4b08      	ldr	r3, [pc, #32]	; (80043e4 <vPortExitCritical+0x50>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d105      	bne.n	80043d6 <vPortExitCritical+0x42>
 80043ca:	2300      	movs	r3, #0
 80043cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	f383 8811 	msr	BASEPRI, r3
}
 80043d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	2000000c 	.word	0x2000000c
	...

080043f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80043f0:	f3ef 8009 	mrs	r0, PSP
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	4b15      	ldr	r3, [pc, #84]	; (8004450 <pxCurrentTCBConst>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	f01e 0f10 	tst.w	lr, #16
 8004400:	bf08      	it	eq
 8004402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800440a:	6010      	str	r0, [r2, #0]
 800440c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004410:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004414:	f380 8811 	msr	BASEPRI, r0
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f7fe ffb6 	bl	8003390 <vTaskSwitchContext>
 8004424:	f04f 0000 	mov.w	r0, #0
 8004428:	f380 8811 	msr	BASEPRI, r0
 800442c:	bc09      	pop	{r0, r3}
 800442e:	6819      	ldr	r1, [r3, #0]
 8004430:	6808      	ldr	r0, [r1, #0]
 8004432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004436:	f01e 0f10 	tst.w	lr, #16
 800443a:	bf08      	it	eq
 800443c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004440:	f380 8809 	msr	PSP, r0
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	f3af 8000 	nop.w

08004450 <pxCurrentTCBConst>:
 8004450:	2000091c 	.word	0x2000091c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004454:	bf00      	nop
 8004456:	bf00      	nop

08004458 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	607b      	str	r3, [r7, #4]
}
 8004470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004472:	f7fe fed3 	bl	800321c <xTaskIncrementTick>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <xPortSysTickHandler+0x40>)
 800447e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	2300      	movs	r3, #0
 8004486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	f383 8811 	msr	BASEPRI, r3
}
 800448e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004490:	bf00      	nop
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	e000ed04 	.word	0xe000ed04

0800449c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <vPortSetupTimerInterrupt+0x34>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044a6:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <vPortSetupTimerInterrupt+0x38>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044ac:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <vPortSetupTimerInterrupt+0x3c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a0a      	ldr	r2, [pc, #40]	; (80044dc <vPortSetupTimerInterrupt+0x40>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	099b      	lsrs	r3, r3, #6
 80044b8:	4a09      	ldr	r2, [pc, #36]	; (80044e0 <vPortSetupTimerInterrupt+0x44>)
 80044ba:	3b01      	subs	r3, #1
 80044bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044be:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <vPortSetupTimerInterrupt+0x34>)
 80044c0:	2207      	movs	r2, #7
 80044c2:	601a      	str	r2, [r3, #0]
}
 80044c4:	bf00      	nop
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	e000e010 	.word	0xe000e010
 80044d4:	e000e018 	.word	0xe000e018
 80044d8:	20000000 	.word	0x20000000
 80044dc:	10624dd3 	.word	0x10624dd3
 80044e0:	e000e014 	.word	0xe000e014

080044e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80044e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80044f4 <vPortEnableVFP+0x10>
 80044e8:	6801      	ldr	r1, [r0, #0]
 80044ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044ee:	6001      	str	r1, [r0, #0]
 80044f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80044f2:	bf00      	nop
 80044f4:	e000ed88 	.word	0xe000ed88

080044f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80044fe:	f3ef 8305 	mrs	r3, IPSR
 8004502:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b0f      	cmp	r3, #15
 8004508:	d914      	bls.n	8004534 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800450a:	4a17      	ldr	r2, [pc, #92]	; (8004568 <vPortValidateInterruptPriority+0x70>)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004514:	4b15      	ldr	r3, [pc, #84]	; (800456c <vPortValidateInterruptPriority+0x74>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	7afa      	ldrb	r2, [r7, #11]
 800451a:	429a      	cmp	r2, r3
 800451c:	d20a      	bcs.n	8004534 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	607b      	str	r3, [r7, #4]
}
 8004530:	bf00      	nop
 8004532:	e7fe      	b.n	8004532 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004534:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <vPortValidateInterruptPriority+0x78>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800453c:	4b0d      	ldr	r3, [pc, #52]	; (8004574 <vPortValidateInterruptPriority+0x7c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	429a      	cmp	r2, r3
 8004542:	d90a      	bls.n	800455a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	603b      	str	r3, [r7, #0]
}
 8004556:	bf00      	nop
 8004558:	e7fe      	b.n	8004558 <vPortValidateInterruptPriority+0x60>
	}
 800455a:	bf00      	nop
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	e000e3f0 	.word	0xe000e3f0
 800456c:	20000f48 	.word	0x20000f48
 8004570:	e000ed0c 	.word	0xe000ed0c
 8004574:	20000f4c 	.word	0x20000f4c

08004578 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004580:	2300      	movs	r3, #0
 8004582:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004584:	f7fe fd8e 	bl	80030a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004588:	4b5b      	ldr	r3, [pc, #364]	; (80046f8 <pvPortMalloc+0x180>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004590:	f000 f920 	bl	80047d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004594:	4b59      	ldr	r3, [pc, #356]	; (80046fc <pvPortMalloc+0x184>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4013      	ands	r3, r2
 800459c:	2b00      	cmp	r3, #0
 800459e:	f040 8093 	bne.w	80046c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01d      	beq.n	80045e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80045a8:	2208      	movs	r2, #8
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4413      	add	r3, r2
 80045ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d014      	beq.n	80045e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f023 0307 	bic.w	r3, r3, #7
 80045c0:	3308      	adds	r3, #8
 80045c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <pvPortMalloc+0x6c>
	__asm volatile
 80045ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	617b      	str	r3, [r7, #20]
}
 80045e0:	bf00      	nop
 80045e2:	e7fe      	b.n	80045e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d06e      	beq.n	80046c8 <pvPortMalloc+0x150>
 80045ea:	4b45      	ldr	r3, [pc, #276]	; (8004700 <pvPortMalloc+0x188>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d869      	bhi.n	80046c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045f4:	4b43      	ldr	r3, [pc, #268]	; (8004704 <pvPortMalloc+0x18c>)
 80045f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045f8:	4b42      	ldr	r3, [pc, #264]	; (8004704 <pvPortMalloc+0x18c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045fe:	e004      	b.n	800460a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	429a      	cmp	r2, r3
 8004612:	d903      	bls.n	800461c <pvPortMalloc+0xa4>
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f1      	bne.n	8004600 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800461c:	4b36      	ldr	r3, [pc, #216]	; (80046f8 <pvPortMalloc+0x180>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004622:	429a      	cmp	r2, r3
 8004624:	d050      	beq.n	80046c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2208      	movs	r2, #8
 800462c:	4413      	add	r3, r2
 800462e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	1ad2      	subs	r2, r2, r3
 8004640:	2308      	movs	r3, #8
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	429a      	cmp	r2, r3
 8004646:	d91f      	bls.n	8004688 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4413      	add	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <pvPortMalloc+0xf8>
	__asm volatile
 800465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	613b      	str	r3, [r7, #16]
}
 800466c:	bf00      	nop
 800466e:	e7fe      	b.n	800466e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	1ad2      	subs	r2, r2, r3
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004682:	69b8      	ldr	r0, [r7, #24]
 8004684:	f000 f908 	bl	8004898 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004688:	4b1d      	ldr	r3, [pc, #116]	; (8004700 <pvPortMalloc+0x188>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	4a1b      	ldr	r2, [pc, #108]	; (8004700 <pvPortMalloc+0x188>)
 8004694:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004696:	4b1a      	ldr	r3, [pc, #104]	; (8004700 <pvPortMalloc+0x188>)
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	4b1b      	ldr	r3, [pc, #108]	; (8004708 <pvPortMalloc+0x190>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d203      	bcs.n	80046aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046a2:	4b17      	ldr	r3, [pc, #92]	; (8004700 <pvPortMalloc+0x188>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a18      	ldr	r2, [pc, #96]	; (8004708 <pvPortMalloc+0x190>)
 80046a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	4b13      	ldr	r3, [pc, #76]	; (80046fc <pvPortMalloc+0x184>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80046be:	4b13      	ldr	r3, [pc, #76]	; (800470c <pvPortMalloc+0x194>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3301      	adds	r3, #1
 80046c4:	4a11      	ldr	r2, [pc, #68]	; (800470c <pvPortMalloc+0x194>)
 80046c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046c8:	f7fe fcfa 	bl	80030c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <pvPortMalloc+0x174>
	__asm volatile
 80046d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	60fb      	str	r3, [r7, #12]
}
 80046e8:	bf00      	nop
 80046ea:	e7fe      	b.n	80046ea <pvPortMalloc+0x172>
	return pvReturn;
 80046ec:	69fb      	ldr	r3, [r7, #28]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3728      	adds	r7, #40	; 0x28
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20001b10 	.word	0x20001b10
 80046fc:	20001b24 	.word	0x20001b24
 8004700:	20001b14 	.word	0x20001b14
 8004704:	20001b08 	.word	0x20001b08
 8004708:	20001b18 	.word	0x20001b18
 800470c:	20001b1c 	.word	0x20001b1c

08004710 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d04d      	beq.n	80047be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004722:	2308      	movs	r3, #8
 8004724:	425b      	negs	r3, r3
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	4413      	add	r3, r2
 800472a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	4b24      	ldr	r3, [pc, #144]	; (80047c8 <vPortFree+0xb8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4013      	ands	r3, r2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <vPortFree+0x44>
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	60fb      	str	r3, [r7, #12]
}
 8004750:	bf00      	nop
 8004752:	e7fe      	b.n	8004752 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <vPortFree+0x62>
	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	60bb      	str	r3, [r7, #8]
}
 800476e:	bf00      	nop
 8004770:	e7fe      	b.n	8004770 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <vPortFree+0xb8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01e      	beq.n	80047be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d11a      	bne.n	80047be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	4b0e      	ldr	r3, [pc, #56]	; (80047c8 <vPortFree+0xb8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	43db      	mvns	r3, r3
 8004792:	401a      	ands	r2, r3
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004798:	f7fe fc84 	bl	80030a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <vPortFree+0xbc>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4413      	add	r3, r2
 80047a6:	4a09      	ldr	r2, [pc, #36]	; (80047cc <vPortFree+0xbc>)
 80047a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047aa:	6938      	ldr	r0, [r7, #16]
 80047ac:	f000 f874 	bl	8004898 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80047b0:	4b07      	ldr	r3, [pc, #28]	; (80047d0 <vPortFree+0xc0>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3301      	adds	r3, #1
 80047b6:	4a06      	ldr	r2, [pc, #24]	; (80047d0 <vPortFree+0xc0>)
 80047b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80047ba:	f7fe fc81 	bl	80030c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80047be:	bf00      	nop
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	20001b24 	.word	0x20001b24
 80047cc:	20001b14 	.word	0x20001b14
 80047d0:	20001b20 	.word	0x20001b20

080047d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80047de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047e0:	4b27      	ldr	r3, [pc, #156]	; (8004880 <prvHeapInit+0xac>)
 80047e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00c      	beq.n	8004808 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3307      	adds	r3, #7
 80047f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0307 	bic.w	r3, r3, #7
 80047fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	4a1f      	ldr	r2, [pc, #124]	; (8004880 <prvHeapInit+0xac>)
 8004804:	4413      	add	r3, r2
 8004806:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800480c:	4a1d      	ldr	r2, [pc, #116]	; (8004884 <prvHeapInit+0xb0>)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004812:	4b1c      	ldr	r3, [pc, #112]	; (8004884 <prvHeapInit+0xb0>)
 8004814:	2200      	movs	r2, #0
 8004816:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	4413      	add	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004820:	2208      	movs	r2, #8
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1a9b      	subs	r3, r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0307 	bic.w	r3, r3, #7
 800482e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4a15      	ldr	r2, [pc, #84]	; (8004888 <prvHeapInit+0xb4>)
 8004834:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004836:	4b14      	ldr	r3, [pc, #80]	; (8004888 <prvHeapInit+0xb4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2200      	movs	r2, #0
 800483c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800483e:	4b12      	ldr	r3, [pc, #72]	; (8004888 <prvHeapInit+0xb4>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	1ad2      	subs	r2, r2, r3
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004854:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <prvHeapInit+0xb4>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4a0a      	ldr	r2, [pc, #40]	; (800488c <prvHeapInit+0xb8>)
 8004862:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	4a09      	ldr	r2, [pc, #36]	; (8004890 <prvHeapInit+0xbc>)
 800486a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800486c:	4b09      	ldr	r3, [pc, #36]	; (8004894 <prvHeapInit+0xc0>)
 800486e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004872:	601a      	str	r2, [r3, #0]
}
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	20000f50 	.word	0x20000f50
 8004884:	20001b08 	.word	0x20001b08
 8004888:	20001b10 	.word	0x20001b10
 800488c:	20001b18 	.word	0x20001b18
 8004890:	20001b14 	.word	0x20001b14
 8004894:	20001b24 	.word	0x20001b24

08004898 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048a0:	4b28      	ldr	r3, [pc, #160]	; (8004944 <prvInsertBlockIntoFreeList+0xac>)
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	e002      	b.n	80048ac <prvInsertBlockIntoFreeList+0x14>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d8f7      	bhi.n	80048a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	4413      	add	r3, r2
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d108      	bne.n	80048da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	441a      	add	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	441a      	add	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d118      	bne.n	8004920 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	4b15      	ldr	r3, [pc, #84]	; (8004948 <prvInsertBlockIntoFreeList+0xb0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d00d      	beq.n	8004916 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	441a      	add	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	e008      	b.n	8004928 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004916:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <prvInsertBlockIntoFreeList+0xb0>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	e003      	b.n	8004928 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	429a      	cmp	r2, r3
 800492e:	d002      	beq.n	8004936 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004936:	bf00      	nop
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20001b08 	.word	0x20001b08
 8004948:	20001b10 	.word	0x20001b10

0800494c <__libc_init_array>:
 800494c:	b570      	push	{r4, r5, r6, lr}
 800494e:	4d0d      	ldr	r5, [pc, #52]	; (8004984 <__libc_init_array+0x38>)
 8004950:	4c0d      	ldr	r4, [pc, #52]	; (8004988 <__libc_init_array+0x3c>)
 8004952:	1b64      	subs	r4, r4, r5
 8004954:	10a4      	asrs	r4, r4, #2
 8004956:	2600      	movs	r6, #0
 8004958:	42a6      	cmp	r6, r4
 800495a:	d109      	bne.n	8004970 <__libc_init_array+0x24>
 800495c:	4d0b      	ldr	r5, [pc, #44]	; (800498c <__libc_init_array+0x40>)
 800495e:	4c0c      	ldr	r4, [pc, #48]	; (8004990 <__libc_init_array+0x44>)
 8004960:	f000 fd06 	bl	8005370 <_init>
 8004964:	1b64      	subs	r4, r4, r5
 8004966:	10a4      	asrs	r4, r4, #2
 8004968:	2600      	movs	r6, #0
 800496a:	42a6      	cmp	r6, r4
 800496c:	d105      	bne.n	800497a <__libc_init_array+0x2e>
 800496e:	bd70      	pop	{r4, r5, r6, pc}
 8004970:	f855 3b04 	ldr.w	r3, [r5], #4
 8004974:	4798      	blx	r3
 8004976:	3601      	adds	r6, #1
 8004978:	e7ee      	b.n	8004958 <__libc_init_array+0xc>
 800497a:	f855 3b04 	ldr.w	r3, [r5], #4
 800497e:	4798      	blx	r3
 8004980:	3601      	adds	r6, #1
 8004982:	e7f2      	b.n	800496a <__libc_init_array+0x1e>
 8004984:	080054c0 	.word	0x080054c0
 8004988:	080054c0 	.word	0x080054c0
 800498c:	080054c0 	.word	0x080054c0
 8004990:	080054c4 	.word	0x080054c4

08004994 <__retarget_lock_acquire_recursive>:
 8004994:	4770      	bx	lr

08004996 <__retarget_lock_release_recursive>:
 8004996:	4770      	bx	lr

08004998 <memcpy>:
 8004998:	440a      	add	r2, r1
 800499a:	4291      	cmp	r1, r2
 800499c:	f100 33ff 	add.w	r3, r0, #4294967295
 80049a0:	d100      	bne.n	80049a4 <memcpy+0xc>
 80049a2:	4770      	bx	lr
 80049a4:	b510      	push	{r4, lr}
 80049a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049ae:	4291      	cmp	r1, r2
 80049b0:	d1f9      	bne.n	80049a6 <memcpy+0xe>
 80049b2:	bd10      	pop	{r4, pc}

080049b4 <memset>:
 80049b4:	4402      	add	r2, r0
 80049b6:	4603      	mov	r3, r0
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d100      	bne.n	80049be <memset+0xa>
 80049bc:	4770      	bx	lr
 80049be:	f803 1b01 	strb.w	r1, [r3], #1
 80049c2:	e7f9      	b.n	80049b8 <memset+0x4>

080049c4 <sbrk_aligned>:
 80049c4:	b570      	push	{r4, r5, r6, lr}
 80049c6:	4e0e      	ldr	r6, [pc, #56]	; (8004a00 <sbrk_aligned+0x3c>)
 80049c8:	460c      	mov	r4, r1
 80049ca:	6831      	ldr	r1, [r6, #0]
 80049cc:	4605      	mov	r5, r0
 80049ce:	b911      	cbnz	r1, 80049d6 <sbrk_aligned+0x12>
 80049d0:	f000 f8f6 	bl	8004bc0 <_sbrk_r>
 80049d4:	6030      	str	r0, [r6, #0]
 80049d6:	4621      	mov	r1, r4
 80049d8:	4628      	mov	r0, r5
 80049da:	f000 f8f1 	bl	8004bc0 <_sbrk_r>
 80049de:	1c43      	adds	r3, r0, #1
 80049e0:	d00a      	beq.n	80049f8 <sbrk_aligned+0x34>
 80049e2:	1cc4      	adds	r4, r0, #3
 80049e4:	f024 0403 	bic.w	r4, r4, #3
 80049e8:	42a0      	cmp	r0, r4
 80049ea:	d007      	beq.n	80049fc <sbrk_aligned+0x38>
 80049ec:	1a21      	subs	r1, r4, r0
 80049ee:	4628      	mov	r0, r5
 80049f0:	f000 f8e6 	bl	8004bc0 <_sbrk_r>
 80049f4:	3001      	adds	r0, #1
 80049f6:	d101      	bne.n	80049fc <sbrk_aligned+0x38>
 80049f8:	f04f 34ff 	mov.w	r4, #4294967295
 80049fc:	4620      	mov	r0, r4
 80049fe:	bd70      	pop	{r4, r5, r6, pc}
 8004a00:	20001b30 	.word	0x20001b30

08004a04 <_malloc_r>:
 8004a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a08:	1ccd      	adds	r5, r1, #3
 8004a0a:	f025 0503 	bic.w	r5, r5, #3
 8004a0e:	3508      	adds	r5, #8
 8004a10:	2d0c      	cmp	r5, #12
 8004a12:	bf38      	it	cc
 8004a14:	250c      	movcc	r5, #12
 8004a16:	2d00      	cmp	r5, #0
 8004a18:	4607      	mov	r7, r0
 8004a1a:	db01      	blt.n	8004a20 <_malloc_r+0x1c>
 8004a1c:	42a9      	cmp	r1, r5
 8004a1e:	d905      	bls.n	8004a2c <_malloc_r+0x28>
 8004a20:	230c      	movs	r3, #12
 8004a22:	603b      	str	r3, [r7, #0]
 8004a24:	2600      	movs	r6, #0
 8004a26:	4630      	mov	r0, r6
 8004a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a2c:	4e2e      	ldr	r6, [pc, #184]	; (8004ae8 <_malloc_r+0xe4>)
 8004a2e:	f000 f8f7 	bl	8004c20 <__malloc_lock>
 8004a32:	6833      	ldr	r3, [r6, #0]
 8004a34:	461c      	mov	r4, r3
 8004a36:	bb34      	cbnz	r4, 8004a86 <_malloc_r+0x82>
 8004a38:	4629      	mov	r1, r5
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	f7ff ffc2 	bl	80049c4 <sbrk_aligned>
 8004a40:	1c43      	adds	r3, r0, #1
 8004a42:	4604      	mov	r4, r0
 8004a44:	d14d      	bne.n	8004ae2 <_malloc_r+0xde>
 8004a46:	6834      	ldr	r4, [r6, #0]
 8004a48:	4626      	mov	r6, r4
 8004a4a:	2e00      	cmp	r6, #0
 8004a4c:	d140      	bne.n	8004ad0 <_malloc_r+0xcc>
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	4631      	mov	r1, r6
 8004a52:	4638      	mov	r0, r7
 8004a54:	eb04 0803 	add.w	r8, r4, r3
 8004a58:	f000 f8b2 	bl	8004bc0 <_sbrk_r>
 8004a5c:	4580      	cmp	r8, r0
 8004a5e:	d13a      	bne.n	8004ad6 <_malloc_r+0xd2>
 8004a60:	6821      	ldr	r1, [r4, #0]
 8004a62:	3503      	adds	r5, #3
 8004a64:	1a6d      	subs	r5, r5, r1
 8004a66:	f025 0503 	bic.w	r5, r5, #3
 8004a6a:	3508      	adds	r5, #8
 8004a6c:	2d0c      	cmp	r5, #12
 8004a6e:	bf38      	it	cc
 8004a70:	250c      	movcc	r5, #12
 8004a72:	4629      	mov	r1, r5
 8004a74:	4638      	mov	r0, r7
 8004a76:	f7ff ffa5 	bl	80049c4 <sbrk_aligned>
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	d02b      	beq.n	8004ad6 <_malloc_r+0xd2>
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	442b      	add	r3, r5
 8004a82:	6023      	str	r3, [r4, #0]
 8004a84:	e00e      	b.n	8004aa4 <_malloc_r+0xa0>
 8004a86:	6822      	ldr	r2, [r4, #0]
 8004a88:	1b52      	subs	r2, r2, r5
 8004a8a:	d41e      	bmi.n	8004aca <_malloc_r+0xc6>
 8004a8c:	2a0b      	cmp	r2, #11
 8004a8e:	d916      	bls.n	8004abe <_malloc_r+0xba>
 8004a90:	1961      	adds	r1, r4, r5
 8004a92:	42a3      	cmp	r3, r4
 8004a94:	6025      	str	r5, [r4, #0]
 8004a96:	bf18      	it	ne
 8004a98:	6059      	strne	r1, [r3, #4]
 8004a9a:	6863      	ldr	r3, [r4, #4]
 8004a9c:	bf08      	it	eq
 8004a9e:	6031      	streq	r1, [r6, #0]
 8004aa0:	5162      	str	r2, [r4, r5]
 8004aa2:	604b      	str	r3, [r1, #4]
 8004aa4:	4638      	mov	r0, r7
 8004aa6:	f104 060b 	add.w	r6, r4, #11
 8004aaa:	f000 f8bf 	bl	8004c2c <__malloc_unlock>
 8004aae:	f026 0607 	bic.w	r6, r6, #7
 8004ab2:	1d23      	adds	r3, r4, #4
 8004ab4:	1af2      	subs	r2, r6, r3
 8004ab6:	d0b6      	beq.n	8004a26 <_malloc_r+0x22>
 8004ab8:	1b9b      	subs	r3, r3, r6
 8004aba:	50a3      	str	r3, [r4, r2]
 8004abc:	e7b3      	b.n	8004a26 <_malloc_r+0x22>
 8004abe:	6862      	ldr	r2, [r4, #4]
 8004ac0:	42a3      	cmp	r3, r4
 8004ac2:	bf0c      	ite	eq
 8004ac4:	6032      	streq	r2, [r6, #0]
 8004ac6:	605a      	strne	r2, [r3, #4]
 8004ac8:	e7ec      	b.n	8004aa4 <_malloc_r+0xa0>
 8004aca:	4623      	mov	r3, r4
 8004acc:	6864      	ldr	r4, [r4, #4]
 8004ace:	e7b2      	b.n	8004a36 <_malloc_r+0x32>
 8004ad0:	4634      	mov	r4, r6
 8004ad2:	6876      	ldr	r6, [r6, #4]
 8004ad4:	e7b9      	b.n	8004a4a <_malloc_r+0x46>
 8004ad6:	230c      	movs	r3, #12
 8004ad8:	603b      	str	r3, [r7, #0]
 8004ada:	4638      	mov	r0, r7
 8004adc:	f000 f8a6 	bl	8004c2c <__malloc_unlock>
 8004ae0:	e7a1      	b.n	8004a26 <_malloc_r+0x22>
 8004ae2:	6025      	str	r5, [r4, #0]
 8004ae4:	e7de      	b.n	8004aa4 <_malloc_r+0xa0>
 8004ae6:	bf00      	nop
 8004ae8:	20001b2c 	.word	0x20001b2c

08004aec <cleanup_glue>:
 8004aec:	b538      	push	{r3, r4, r5, lr}
 8004aee:	460c      	mov	r4, r1
 8004af0:	6809      	ldr	r1, [r1, #0]
 8004af2:	4605      	mov	r5, r0
 8004af4:	b109      	cbz	r1, 8004afa <cleanup_glue+0xe>
 8004af6:	f7ff fff9 	bl	8004aec <cleanup_glue>
 8004afa:	4621      	mov	r1, r4
 8004afc:	4628      	mov	r0, r5
 8004afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b02:	f000 b899 	b.w	8004c38 <_free_r>
	...

08004b08 <_reclaim_reent>:
 8004b08:	4b2c      	ldr	r3, [pc, #176]	; (8004bbc <_reclaim_reent+0xb4>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4283      	cmp	r3, r0
 8004b0e:	b570      	push	{r4, r5, r6, lr}
 8004b10:	4604      	mov	r4, r0
 8004b12:	d051      	beq.n	8004bb8 <_reclaim_reent+0xb0>
 8004b14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004b16:	b143      	cbz	r3, 8004b2a <_reclaim_reent+0x22>
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d14a      	bne.n	8004bb4 <_reclaim_reent+0xac>
 8004b1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b20:	6819      	ldr	r1, [r3, #0]
 8004b22:	b111      	cbz	r1, 8004b2a <_reclaim_reent+0x22>
 8004b24:	4620      	mov	r0, r4
 8004b26:	f000 f887 	bl	8004c38 <_free_r>
 8004b2a:	6961      	ldr	r1, [r4, #20]
 8004b2c:	b111      	cbz	r1, 8004b34 <_reclaim_reent+0x2c>
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f000 f882 	bl	8004c38 <_free_r>
 8004b34:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004b36:	b111      	cbz	r1, 8004b3e <_reclaim_reent+0x36>
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f000 f87d 	bl	8004c38 <_free_r>
 8004b3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004b40:	b111      	cbz	r1, 8004b48 <_reclaim_reent+0x40>
 8004b42:	4620      	mov	r0, r4
 8004b44:	f000 f878 	bl	8004c38 <_free_r>
 8004b48:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004b4a:	b111      	cbz	r1, 8004b52 <_reclaim_reent+0x4a>
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f000 f873 	bl	8004c38 <_free_r>
 8004b52:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004b54:	b111      	cbz	r1, 8004b5c <_reclaim_reent+0x54>
 8004b56:	4620      	mov	r0, r4
 8004b58:	f000 f86e 	bl	8004c38 <_free_r>
 8004b5c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004b5e:	b111      	cbz	r1, 8004b66 <_reclaim_reent+0x5e>
 8004b60:	4620      	mov	r0, r4
 8004b62:	f000 f869 	bl	8004c38 <_free_r>
 8004b66:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004b68:	b111      	cbz	r1, 8004b70 <_reclaim_reent+0x68>
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	f000 f864 	bl	8004c38 <_free_r>
 8004b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b72:	b111      	cbz	r1, 8004b7a <_reclaim_reent+0x72>
 8004b74:	4620      	mov	r0, r4
 8004b76:	f000 f85f 	bl	8004c38 <_free_r>
 8004b7a:	69a3      	ldr	r3, [r4, #24]
 8004b7c:	b1e3      	cbz	r3, 8004bb8 <_reclaim_reent+0xb0>
 8004b7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b80:	4620      	mov	r0, r4
 8004b82:	4798      	blx	r3
 8004b84:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004b86:	b1b9      	cbz	r1, 8004bb8 <_reclaim_reent+0xb0>
 8004b88:	4620      	mov	r0, r4
 8004b8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004b8e:	f7ff bfad 	b.w	8004aec <cleanup_glue>
 8004b92:	5949      	ldr	r1, [r1, r5]
 8004b94:	b941      	cbnz	r1, 8004ba8 <_reclaim_reent+0xa0>
 8004b96:	3504      	adds	r5, #4
 8004b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b9a:	2d80      	cmp	r5, #128	; 0x80
 8004b9c:	68d9      	ldr	r1, [r3, #12]
 8004b9e:	d1f8      	bne.n	8004b92 <_reclaim_reent+0x8a>
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f000 f849 	bl	8004c38 <_free_r>
 8004ba6:	e7ba      	b.n	8004b1e <_reclaim_reent+0x16>
 8004ba8:	680e      	ldr	r6, [r1, #0]
 8004baa:	4620      	mov	r0, r4
 8004bac:	f000 f844 	bl	8004c38 <_free_r>
 8004bb0:	4631      	mov	r1, r6
 8004bb2:	e7ef      	b.n	8004b94 <_reclaim_reent+0x8c>
 8004bb4:	2500      	movs	r5, #0
 8004bb6:	e7ef      	b.n	8004b98 <_reclaim_reent+0x90>
 8004bb8:	bd70      	pop	{r4, r5, r6, pc}
 8004bba:	bf00      	nop
 8004bbc:	20000010 	.word	0x20000010

08004bc0 <_sbrk_r>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	4d06      	ldr	r5, [pc, #24]	; (8004bdc <_sbrk_r+0x1c>)
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	4608      	mov	r0, r1
 8004bca:	602b      	str	r3, [r5, #0]
 8004bcc:	f000 fbc2 	bl	8005354 <_sbrk>
 8004bd0:	1c43      	adds	r3, r0, #1
 8004bd2:	d102      	bne.n	8004bda <_sbrk_r+0x1a>
 8004bd4:	682b      	ldr	r3, [r5, #0]
 8004bd6:	b103      	cbz	r3, 8004bda <_sbrk_r+0x1a>
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	bd38      	pop	{r3, r4, r5, pc}
 8004bdc:	20001b34 	.word	0x20001b34

08004be0 <siprintf>:
 8004be0:	b40e      	push	{r1, r2, r3}
 8004be2:	b500      	push	{lr}
 8004be4:	b09c      	sub	sp, #112	; 0x70
 8004be6:	ab1d      	add	r3, sp, #116	; 0x74
 8004be8:	9002      	str	r0, [sp, #8]
 8004bea:	9006      	str	r0, [sp, #24]
 8004bec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bf0:	4809      	ldr	r0, [pc, #36]	; (8004c18 <siprintf+0x38>)
 8004bf2:	9107      	str	r1, [sp, #28]
 8004bf4:	9104      	str	r1, [sp, #16]
 8004bf6:	4909      	ldr	r1, [pc, #36]	; (8004c1c <siprintf+0x3c>)
 8004bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bfc:	9105      	str	r1, [sp, #20]
 8004bfe:	6800      	ldr	r0, [r0, #0]
 8004c00:	9301      	str	r3, [sp, #4]
 8004c02:	a902      	add	r1, sp, #8
 8004c04:	f000 f8c0 	bl	8004d88 <_svfiprintf_r>
 8004c08:	9b02      	ldr	r3, [sp, #8]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	b01c      	add	sp, #112	; 0x70
 8004c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c14:	b003      	add	sp, #12
 8004c16:	4770      	bx	lr
 8004c18:	20000010 	.word	0x20000010
 8004c1c:	ffff0208 	.word	0xffff0208

08004c20 <__malloc_lock>:
 8004c20:	4801      	ldr	r0, [pc, #4]	; (8004c28 <__malloc_lock+0x8>)
 8004c22:	f7ff beb7 	b.w	8004994 <__retarget_lock_acquire_recursive>
 8004c26:	bf00      	nop
 8004c28:	20001b28 	.word	0x20001b28

08004c2c <__malloc_unlock>:
 8004c2c:	4801      	ldr	r0, [pc, #4]	; (8004c34 <__malloc_unlock+0x8>)
 8004c2e:	f7ff beb2 	b.w	8004996 <__retarget_lock_release_recursive>
 8004c32:	bf00      	nop
 8004c34:	20001b28 	.word	0x20001b28

08004c38 <_free_r>:
 8004c38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c3a:	2900      	cmp	r1, #0
 8004c3c:	d044      	beq.n	8004cc8 <_free_r+0x90>
 8004c3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c42:	9001      	str	r0, [sp, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f1a1 0404 	sub.w	r4, r1, #4
 8004c4a:	bfb8      	it	lt
 8004c4c:	18e4      	addlt	r4, r4, r3
 8004c4e:	f7ff ffe7 	bl	8004c20 <__malloc_lock>
 8004c52:	4a1e      	ldr	r2, [pc, #120]	; (8004ccc <_free_r+0x94>)
 8004c54:	9801      	ldr	r0, [sp, #4]
 8004c56:	6813      	ldr	r3, [r2, #0]
 8004c58:	b933      	cbnz	r3, 8004c68 <_free_r+0x30>
 8004c5a:	6063      	str	r3, [r4, #4]
 8004c5c:	6014      	str	r4, [r2, #0]
 8004c5e:	b003      	add	sp, #12
 8004c60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c64:	f7ff bfe2 	b.w	8004c2c <__malloc_unlock>
 8004c68:	42a3      	cmp	r3, r4
 8004c6a:	d908      	bls.n	8004c7e <_free_r+0x46>
 8004c6c:	6825      	ldr	r5, [r4, #0]
 8004c6e:	1961      	adds	r1, r4, r5
 8004c70:	428b      	cmp	r3, r1
 8004c72:	bf01      	itttt	eq
 8004c74:	6819      	ldreq	r1, [r3, #0]
 8004c76:	685b      	ldreq	r3, [r3, #4]
 8004c78:	1949      	addeq	r1, r1, r5
 8004c7a:	6021      	streq	r1, [r4, #0]
 8004c7c:	e7ed      	b.n	8004c5a <_free_r+0x22>
 8004c7e:	461a      	mov	r2, r3
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	b10b      	cbz	r3, 8004c88 <_free_r+0x50>
 8004c84:	42a3      	cmp	r3, r4
 8004c86:	d9fa      	bls.n	8004c7e <_free_r+0x46>
 8004c88:	6811      	ldr	r1, [r2, #0]
 8004c8a:	1855      	adds	r5, r2, r1
 8004c8c:	42a5      	cmp	r5, r4
 8004c8e:	d10b      	bne.n	8004ca8 <_free_r+0x70>
 8004c90:	6824      	ldr	r4, [r4, #0]
 8004c92:	4421      	add	r1, r4
 8004c94:	1854      	adds	r4, r2, r1
 8004c96:	42a3      	cmp	r3, r4
 8004c98:	6011      	str	r1, [r2, #0]
 8004c9a:	d1e0      	bne.n	8004c5e <_free_r+0x26>
 8004c9c:	681c      	ldr	r4, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	6053      	str	r3, [r2, #4]
 8004ca2:	4421      	add	r1, r4
 8004ca4:	6011      	str	r1, [r2, #0]
 8004ca6:	e7da      	b.n	8004c5e <_free_r+0x26>
 8004ca8:	d902      	bls.n	8004cb0 <_free_r+0x78>
 8004caa:	230c      	movs	r3, #12
 8004cac:	6003      	str	r3, [r0, #0]
 8004cae:	e7d6      	b.n	8004c5e <_free_r+0x26>
 8004cb0:	6825      	ldr	r5, [r4, #0]
 8004cb2:	1961      	adds	r1, r4, r5
 8004cb4:	428b      	cmp	r3, r1
 8004cb6:	bf04      	itt	eq
 8004cb8:	6819      	ldreq	r1, [r3, #0]
 8004cba:	685b      	ldreq	r3, [r3, #4]
 8004cbc:	6063      	str	r3, [r4, #4]
 8004cbe:	bf04      	itt	eq
 8004cc0:	1949      	addeq	r1, r1, r5
 8004cc2:	6021      	streq	r1, [r4, #0]
 8004cc4:	6054      	str	r4, [r2, #4]
 8004cc6:	e7ca      	b.n	8004c5e <_free_r+0x26>
 8004cc8:	b003      	add	sp, #12
 8004cca:	bd30      	pop	{r4, r5, pc}
 8004ccc:	20001b2c 	.word	0x20001b2c

08004cd0 <__ssputs_r>:
 8004cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd4:	688e      	ldr	r6, [r1, #8]
 8004cd6:	429e      	cmp	r6, r3
 8004cd8:	4682      	mov	sl, r0
 8004cda:	460c      	mov	r4, r1
 8004cdc:	4690      	mov	r8, r2
 8004cde:	461f      	mov	r7, r3
 8004ce0:	d838      	bhi.n	8004d54 <__ssputs_r+0x84>
 8004ce2:	898a      	ldrh	r2, [r1, #12]
 8004ce4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ce8:	d032      	beq.n	8004d50 <__ssputs_r+0x80>
 8004cea:	6825      	ldr	r5, [r4, #0]
 8004cec:	6909      	ldr	r1, [r1, #16]
 8004cee:	eba5 0901 	sub.w	r9, r5, r1
 8004cf2:	6965      	ldr	r5, [r4, #20]
 8004cf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	444b      	add	r3, r9
 8004d00:	106d      	asrs	r5, r5, #1
 8004d02:	429d      	cmp	r5, r3
 8004d04:	bf38      	it	cc
 8004d06:	461d      	movcc	r5, r3
 8004d08:	0553      	lsls	r3, r2, #21
 8004d0a:	d531      	bpl.n	8004d70 <__ssputs_r+0xa0>
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	f7ff fe79 	bl	8004a04 <_malloc_r>
 8004d12:	4606      	mov	r6, r0
 8004d14:	b950      	cbnz	r0, 8004d2c <__ssputs_r+0x5c>
 8004d16:	230c      	movs	r3, #12
 8004d18:	f8ca 3000 	str.w	r3, [sl]
 8004d1c:	89a3      	ldrh	r3, [r4, #12]
 8004d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d22:	81a3      	strh	r3, [r4, #12]
 8004d24:	f04f 30ff 	mov.w	r0, #4294967295
 8004d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d2c:	6921      	ldr	r1, [r4, #16]
 8004d2e:	464a      	mov	r2, r9
 8004d30:	f7ff fe32 	bl	8004998 <memcpy>
 8004d34:	89a3      	ldrh	r3, [r4, #12]
 8004d36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3e:	81a3      	strh	r3, [r4, #12]
 8004d40:	6126      	str	r6, [r4, #16]
 8004d42:	6165      	str	r5, [r4, #20]
 8004d44:	444e      	add	r6, r9
 8004d46:	eba5 0509 	sub.w	r5, r5, r9
 8004d4a:	6026      	str	r6, [r4, #0]
 8004d4c:	60a5      	str	r5, [r4, #8]
 8004d4e:	463e      	mov	r6, r7
 8004d50:	42be      	cmp	r6, r7
 8004d52:	d900      	bls.n	8004d56 <__ssputs_r+0x86>
 8004d54:	463e      	mov	r6, r7
 8004d56:	6820      	ldr	r0, [r4, #0]
 8004d58:	4632      	mov	r2, r6
 8004d5a:	4641      	mov	r1, r8
 8004d5c:	f000 faa8 	bl	80052b0 <memmove>
 8004d60:	68a3      	ldr	r3, [r4, #8]
 8004d62:	1b9b      	subs	r3, r3, r6
 8004d64:	60a3      	str	r3, [r4, #8]
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	4433      	add	r3, r6
 8004d6a:	6023      	str	r3, [r4, #0]
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	e7db      	b.n	8004d28 <__ssputs_r+0x58>
 8004d70:	462a      	mov	r2, r5
 8004d72:	f000 fab7 	bl	80052e4 <_realloc_r>
 8004d76:	4606      	mov	r6, r0
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	d1e1      	bne.n	8004d40 <__ssputs_r+0x70>
 8004d7c:	6921      	ldr	r1, [r4, #16]
 8004d7e:	4650      	mov	r0, sl
 8004d80:	f7ff ff5a 	bl	8004c38 <_free_r>
 8004d84:	e7c7      	b.n	8004d16 <__ssputs_r+0x46>
	...

08004d88 <_svfiprintf_r>:
 8004d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8c:	4698      	mov	r8, r3
 8004d8e:	898b      	ldrh	r3, [r1, #12]
 8004d90:	061b      	lsls	r3, r3, #24
 8004d92:	b09d      	sub	sp, #116	; 0x74
 8004d94:	4607      	mov	r7, r0
 8004d96:	460d      	mov	r5, r1
 8004d98:	4614      	mov	r4, r2
 8004d9a:	d50e      	bpl.n	8004dba <_svfiprintf_r+0x32>
 8004d9c:	690b      	ldr	r3, [r1, #16]
 8004d9e:	b963      	cbnz	r3, 8004dba <_svfiprintf_r+0x32>
 8004da0:	2140      	movs	r1, #64	; 0x40
 8004da2:	f7ff fe2f 	bl	8004a04 <_malloc_r>
 8004da6:	6028      	str	r0, [r5, #0]
 8004da8:	6128      	str	r0, [r5, #16]
 8004daa:	b920      	cbnz	r0, 8004db6 <_svfiprintf_r+0x2e>
 8004dac:	230c      	movs	r3, #12
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295
 8004db4:	e0d1      	b.n	8004f5a <_svfiprintf_r+0x1d2>
 8004db6:	2340      	movs	r3, #64	; 0x40
 8004db8:	616b      	str	r3, [r5, #20]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8004dbe:	2320      	movs	r3, #32
 8004dc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dc8:	2330      	movs	r3, #48	; 0x30
 8004dca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004f74 <_svfiprintf_r+0x1ec>
 8004dce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dd2:	f04f 0901 	mov.w	r9, #1
 8004dd6:	4623      	mov	r3, r4
 8004dd8:	469a      	mov	sl, r3
 8004dda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dde:	b10a      	cbz	r2, 8004de4 <_svfiprintf_r+0x5c>
 8004de0:	2a25      	cmp	r2, #37	; 0x25
 8004de2:	d1f9      	bne.n	8004dd8 <_svfiprintf_r+0x50>
 8004de4:	ebba 0b04 	subs.w	fp, sl, r4
 8004de8:	d00b      	beq.n	8004e02 <_svfiprintf_r+0x7a>
 8004dea:	465b      	mov	r3, fp
 8004dec:	4622      	mov	r2, r4
 8004dee:	4629      	mov	r1, r5
 8004df0:	4638      	mov	r0, r7
 8004df2:	f7ff ff6d 	bl	8004cd0 <__ssputs_r>
 8004df6:	3001      	adds	r0, #1
 8004df8:	f000 80aa 	beq.w	8004f50 <_svfiprintf_r+0x1c8>
 8004dfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dfe:	445a      	add	r2, fp
 8004e00:	9209      	str	r2, [sp, #36]	; 0x24
 8004e02:	f89a 3000 	ldrb.w	r3, [sl]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 80a2 	beq.w	8004f50 <_svfiprintf_r+0x1c8>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e16:	f10a 0a01 	add.w	sl, sl, #1
 8004e1a:	9304      	str	r3, [sp, #16]
 8004e1c:	9307      	str	r3, [sp, #28]
 8004e1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e22:	931a      	str	r3, [sp, #104]	; 0x68
 8004e24:	4654      	mov	r4, sl
 8004e26:	2205      	movs	r2, #5
 8004e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e2c:	4851      	ldr	r0, [pc, #324]	; (8004f74 <_svfiprintf_r+0x1ec>)
 8004e2e:	f7fb f9cf 	bl	80001d0 <memchr>
 8004e32:	9a04      	ldr	r2, [sp, #16]
 8004e34:	b9d8      	cbnz	r0, 8004e6e <_svfiprintf_r+0xe6>
 8004e36:	06d0      	lsls	r0, r2, #27
 8004e38:	bf44      	itt	mi
 8004e3a:	2320      	movmi	r3, #32
 8004e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e40:	0711      	lsls	r1, r2, #28
 8004e42:	bf44      	itt	mi
 8004e44:	232b      	movmi	r3, #43	; 0x2b
 8004e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8004e4e:	2b2a      	cmp	r3, #42	; 0x2a
 8004e50:	d015      	beq.n	8004e7e <_svfiprintf_r+0xf6>
 8004e52:	9a07      	ldr	r2, [sp, #28]
 8004e54:	4654      	mov	r4, sl
 8004e56:	2000      	movs	r0, #0
 8004e58:	f04f 0c0a 	mov.w	ip, #10
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e62:	3b30      	subs	r3, #48	; 0x30
 8004e64:	2b09      	cmp	r3, #9
 8004e66:	d94e      	bls.n	8004f06 <_svfiprintf_r+0x17e>
 8004e68:	b1b0      	cbz	r0, 8004e98 <_svfiprintf_r+0x110>
 8004e6a:	9207      	str	r2, [sp, #28]
 8004e6c:	e014      	b.n	8004e98 <_svfiprintf_r+0x110>
 8004e6e:	eba0 0308 	sub.w	r3, r0, r8
 8004e72:	fa09 f303 	lsl.w	r3, r9, r3
 8004e76:	4313      	orrs	r3, r2
 8004e78:	9304      	str	r3, [sp, #16]
 8004e7a:	46a2      	mov	sl, r4
 8004e7c:	e7d2      	b.n	8004e24 <_svfiprintf_r+0x9c>
 8004e7e:	9b03      	ldr	r3, [sp, #12]
 8004e80:	1d19      	adds	r1, r3, #4
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	9103      	str	r1, [sp, #12]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	bfbb      	ittet	lt
 8004e8a:	425b      	neglt	r3, r3
 8004e8c:	f042 0202 	orrlt.w	r2, r2, #2
 8004e90:	9307      	strge	r3, [sp, #28]
 8004e92:	9307      	strlt	r3, [sp, #28]
 8004e94:	bfb8      	it	lt
 8004e96:	9204      	strlt	r2, [sp, #16]
 8004e98:	7823      	ldrb	r3, [r4, #0]
 8004e9a:	2b2e      	cmp	r3, #46	; 0x2e
 8004e9c:	d10c      	bne.n	8004eb8 <_svfiprintf_r+0x130>
 8004e9e:	7863      	ldrb	r3, [r4, #1]
 8004ea0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ea2:	d135      	bne.n	8004f10 <_svfiprintf_r+0x188>
 8004ea4:	9b03      	ldr	r3, [sp, #12]
 8004ea6:	1d1a      	adds	r2, r3, #4
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	9203      	str	r2, [sp, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	bfb8      	it	lt
 8004eb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004eb4:	3402      	adds	r4, #2
 8004eb6:	9305      	str	r3, [sp, #20]
 8004eb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004f84 <_svfiprintf_r+0x1fc>
 8004ebc:	7821      	ldrb	r1, [r4, #0]
 8004ebe:	2203      	movs	r2, #3
 8004ec0:	4650      	mov	r0, sl
 8004ec2:	f7fb f985 	bl	80001d0 <memchr>
 8004ec6:	b140      	cbz	r0, 8004eda <_svfiprintf_r+0x152>
 8004ec8:	2340      	movs	r3, #64	; 0x40
 8004eca:	eba0 000a 	sub.w	r0, r0, sl
 8004ece:	fa03 f000 	lsl.w	r0, r3, r0
 8004ed2:	9b04      	ldr	r3, [sp, #16]
 8004ed4:	4303      	orrs	r3, r0
 8004ed6:	3401      	adds	r4, #1
 8004ed8:	9304      	str	r3, [sp, #16]
 8004eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ede:	4826      	ldr	r0, [pc, #152]	; (8004f78 <_svfiprintf_r+0x1f0>)
 8004ee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ee4:	2206      	movs	r2, #6
 8004ee6:	f7fb f973 	bl	80001d0 <memchr>
 8004eea:	2800      	cmp	r0, #0
 8004eec:	d038      	beq.n	8004f60 <_svfiprintf_r+0x1d8>
 8004eee:	4b23      	ldr	r3, [pc, #140]	; (8004f7c <_svfiprintf_r+0x1f4>)
 8004ef0:	bb1b      	cbnz	r3, 8004f3a <_svfiprintf_r+0x1b2>
 8004ef2:	9b03      	ldr	r3, [sp, #12]
 8004ef4:	3307      	adds	r3, #7
 8004ef6:	f023 0307 	bic.w	r3, r3, #7
 8004efa:	3308      	adds	r3, #8
 8004efc:	9303      	str	r3, [sp, #12]
 8004efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f00:	4433      	add	r3, r6
 8004f02:	9309      	str	r3, [sp, #36]	; 0x24
 8004f04:	e767      	b.n	8004dd6 <_svfiprintf_r+0x4e>
 8004f06:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f0a:	460c      	mov	r4, r1
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	e7a5      	b.n	8004e5c <_svfiprintf_r+0xd4>
 8004f10:	2300      	movs	r3, #0
 8004f12:	3401      	adds	r4, #1
 8004f14:	9305      	str	r3, [sp, #20]
 8004f16:	4619      	mov	r1, r3
 8004f18:	f04f 0c0a 	mov.w	ip, #10
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f22:	3a30      	subs	r2, #48	; 0x30
 8004f24:	2a09      	cmp	r2, #9
 8004f26:	d903      	bls.n	8004f30 <_svfiprintf_r+0x1a8>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0c5      	beq.n	8004eb8 <_svfiprintf_r+0x130>
 8004f2c:	9105      	str	r1, [sp, #20]
 8004f2e:	e7c3      	b.n	8004eb8 <_svfiprintf_r+0x130>
 8004f30:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f34:	4604      	mov	r4, r0
 8004f36:	2301      	movs	r3, #1
 8004f38:	e7f0      	b.n	8004f1c <_svfiprintf_r+0x194>
 8004f3a:	ab03      	add	r3, sp, #12
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	462a      	mov	r2, r5
 8004f40:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <_svfiprintf_r+0x1f8>)
 8004f42:	a904      	add	r1, sp, #16
 8004f44:	4638      	mov	r0, r7
 8004f46:	f3af 8000 	nop.w
 8004f4a:	1c42      	adds	r2, r0, #1
 8004f4c:	4606      	mov	r6, r0
 8004f4e:	d1d6      	bne.n	8004efe <_svfiprintf_r+0x176>
 8004f50:	89ab      	ldrh	r3, [r5, #12]
 8004f52:	065b      	lsls	r3, r3, #25
 8004f54:	f53f af2c 	bmi.w	8004db0 <_svfiprintf_r+0x28>
 8004f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f5a:	b01d      	add	sp, #116	; 0x74
 8004f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f60:	ab03      	add	r3, sp, #12
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	462a      	mov	r2, r5
 8004f66:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <_svfiprintf_r+0x1f8>)
 8004f68:	a904      	add	r1, sp, #16
 8004f6a:	4638      	mov	r0, r7
 8004f6c:	f000 f87a 	bl	8005064 <_printf_i>
 8004f70:	e7eb      	b.n	8004f4a <_svfiprintf_r+0x1c2>
 8004f72:	bf00      	nop
 8004f74:	0800548c 	.word	0x0800548c
 8004f78:	08005496 	.word	0x08005496
 8004f7c:	00000000 	.word	0x00000000
 8004f80:	08004cd1 	.word	0x08004cd1
 8004f84:	08005492 	.word	0x08005492

08004f88 <_printf_common>:
 8004f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f8c:	4616      	mov	r6, r2
 8004f8e:	4699      	mov	r9, r3
 8004f90:	688a      	ldr	r2, [r1, #8]
 8004f92:	690b      	ldr	r3, [r1, #16]
 8004f94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	bfb8      	it	lt
 8004f9c:	4613      	movlt	r3, r2
 8004f9e:	6033      	str	r3, [r6, #0]
 8004fa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fa4:	4607      	mov	r7, r0
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	b10a      	cbz	r2, 8004fae <_printf_common+0x26>
 8004faa:	3301      	adds	r3, #1
 8004fac:	6033      	str	r3, [r6, #0]
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	0699      	lsls	r1, r3, #26
 8004fb2:	bf42      	ittt	mi
 8004fb4:	6833      	ldrmi	r3, [r6, #0]
 8004fb6:	3302      	addmi	r3, #2
 8004fb8:	6033      	strmi	r3, [r6, #0]
 8004fba:	6825      	ldr	r5, [r4, #0]
 8004fbc:	f015 0506 	ands.w	r5, r5, #6
 8004fc0:	d106      	bne.n	8004fd0 <_printf_common+0x48>
 8004fc2:	f104 0a19 	add.w	sl, r4, #25
 8004fc6:	68e3      	ldr	r3, [r4, #12]
 8004fc8:	6832      	ldr	r2, [r6, #0]
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	42ab      	cmp	r3, r5
 8004fce:	dc26      	bgt.n	800501e <_printf_common+0x96>
 8004fd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fd4:	1e13      	subs	r3, r2, #0
 8004fd6:	6822      	ldr	r2, [r4, #0]
 8004fd8:	bf18      	it	ne
 8004fda:	2301      	movne	r3, #1
 8004fdc:	0692      	lsls	r2, r2, #26
 8004fde:	d42b      	bmi.n	8005038 <_printf_common+0xb0>
 8004fe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fe4:	4649      	mov	r1, r9
 8004fe6:	4638      	mov	r0, r7
 8004fe8:	47c0      	blx	r8
 8004fea:	3001      	adds	r0, #1
 8004fec:	d01e      	beq.n	800502c <_printf_common+0xa4>
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	68e5      	ldr	r5, [r4, #12]
 8004ff2:	6832      	ldr	r2, [r6, #0]
 8004ff4:	f003 0306 	and.w	r3, r3, #6
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	bf08      	it	eq
 8004ffc:	1aad      	subeq	r5, r5, r2
 8004ffe:	68a3      	ldr	r3, [r4, #8]
 8005000:	6922      	ldr	r2, [r4, #16]
 8005002:	bf0c      	ite	eq
 8005004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005008:	2500      	movne	r5, #0
 800500a:	4293      	cmp	r3, r2
 800500c:	bfc4      	itt	gt
 800500e:	1a9b      	subgt	r3, r3, r2
 8005010:	18ed      	addgt	r5, r5, r3
 8005012:	2600      	movs	r6, #0
 8005014:	341a      	adds	r4, #26
 8005016:	42b5      	cmp	r5, r6
 8005018:	d11a      	bne.n	8005050 <_printf_common+0xc8>
 800501a:	2000      	movs	r0, #0
 800501c:	e008      	b.n	8005030 <_printf_common+0xa8>
 800501e:	2301      	movs	r3, #1
 8005020:	4652      	mov	r2, sl
 8005022:	4649      	mov	r1, r9
 8005024:	4638      	mov	r0, r7
 8005026:	47c0      	blx	r8
 8005028:	3001      	adds	r0, #1
 800502a:	d103      	bne.n	8005034 <_printf_common+0xac>
 800502c:	f04f 30ff 	mov.w	r0, #4294967295
 8005030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005034:	3501      	adds	r5, #1
 8005036:	e7c6      	b.n	8004fc6 <_printf_common+0x3e>
 8005038:	18e1      	adds	r1, r4, r3
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	2030      	movs	r0, #48	; 0x30
 800503e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005042:	4422      	add	r2, r4
 8005044:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005048:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800504c:	3302      	adds	r3, #2
 800504e:	e7c7      	b.n	8004fe0 <_printf_common+0x58>
 8005050:	2301      	movs	r3, #1
 8005052:	4622      	mov	r2, r4
 8005054:	4649      	mov	r1, r9
 8005056:	4638      	mov	r0, r7
 8005058:	47c0      	blx	r8
 800505a:	3001      	adds	r0, #1
 800505c:	d0e6      	beq.n	800502c <_printf_common+0xa4>
 800505e:	3601      	adds	r6, #1
 8005060:	e7d9      	b.n	8005016 <_printf_common+0x8e>
	...

08005064 <_printf_i>:
 8005064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005068:	7e0f      	ldrb	r7, [r1, #24]
 800506a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800506c:	2f78      	cmp	r7, #120	; 0x78
 800506e:	4691      	mov	r9, r2
 8005070:	4680      	mov	r8, r0
 8005072:	460c      	mov	r4, r1
 8005074:	469a      	mov	sl, r3
 8005076:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800507a:	d807      	bhi.n	800508c <_printf_i+0x28>
 800507c:	2f62      	cmp	r7, #98	; 0x62
 800507e:	d80a      	bhi.n	8005096 <_printf_i+0x32>
 8005080:	2f00      	cmp	r7, #0
 8005082:	f000 80d8 	beq.w	8005236 <_printf_i+0x1d2>
 8005086:	2f58      	cmp	r7, #88	; 0x58
 8005088:	f000 80a3 	beq.w	80051d2 <_printf_i+0x16e>
 800508c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005090:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005094:	e03a      	b.n	800510c <_printf_i+0xa8>
 8005096:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800509a:	2b15      	cmp	r3, #21
 800509c:	d8f6      	bhi.n	800508c <_printf_i+0x28>
 800509e:	a101      	add	r1, pc, #4	; (adr r1, 80050a4 <_printf_i+0x40>)
 80050a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050a4:	080050fd 	.word	0x080050fd
 80050a8:	08005111 	.word	0x08005111
 80050ac:	0800508d 	.word	0x0800508d
 80050b0:	0800508d 	.word	0x0800508d
 80050b4:	0800508d 	.word	0x0800508d
 80050b8:	0800508d 	.word	0x0800508d
 80050bc:	08005111 	.word	0x08005111
 80050c0:	0800508d 	.word	0x0800508d
 80050c4:	0800508d 	.word	0x0800508d
 80050c8:	0800508d 	.word	0x0800508d
 80050cc:	0800508d 	.word	0x0800508d
 80050d0:	0800521d 	.word	0x0800521d
 80050d4:	08005141 	.word	0x08005141
 80050d8:	080051ff 	.word	0x080051ff
 80050dc:	0800508d 	.word	0x0800508d
 80050e0:	0800508d 	.word	0x0800508d
 80050e4:	0800523f 	.word	0x0800523f
 80050e8:	0800508d 	.word	0x0800508d
 80050ec:	08005141 	.word	0x08005141
 80050f0:	0800508d 	.word	0x0800508d
 80050f4:	0800508d 	.word	0x0800508d
 80050f8:	08005207 	.word	0x08005207
 80050fc:	682b      	ldr	r3, [r5, #0]
 80050fe:	1d1a      	adds	r2, r3, #4
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	602a      	str	r2, [r5, #0]
 8005104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800510c:	2301      	movs	r3, #1
 800510e:	e0a3      	b.n	8005258 <_printf_i+0x1f4>
 8005110:	6820      	ldr	r0, [r4, #0]
 8005112:	6829      	ldr	r1, [r5, #0]
 8005114:	0606      	lsls	r6, r0, #24
 8005116:	f101 0304 	add.w	r3, r1, #4
 800511a:	d50a      	bpl.n	8005132 <_printf_i+0xce>
 800511c:	680e      	ldr	r6, [r1, #0]
 800511e:	602b      	str	r3, [r5, #0]
 8005120:	2e00      	cmp	r6, #0
 8005122:	da03      	bge.n	800512c <_printf_i+0xc8>
 8005124:	232d      	movs	r3, #45	; 0x2d
 8005126:	4276      	negs	r6, r6
 8005128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800512c:	485e      	ldr	r0, [pc, #376]	; (80052a8 <_printf_i+0x244>)
 800512e:	230a      	movs	r3, #10
 8005130:	e019      	b.n	8005166 <_printf_i+0x102>
 8005132:	680e      	ldr	r6, [r1, #0]
 8005134:	602b      	str	r3, [r5, #0]
 8005136:	f010 0f40 	tst.w	r0, #64	; 0x40
 800513a:	bf18      	it	ne
 800513c:	b236      	sxthne	r6, r6
 800513e:	e7ef      	b.n	8005120 <_printf_i+0xbc>
 8005140:	682b      	ldr	r3, [r5, #0]
 8005142:	6820      	ldr	r0, [r4, #0]
 8005144:	1d19      	adds	r1, r3, #4
 8005146:	6029      	str	r1, [r5, #0]
 8005148:	0601      	lsls	r1, r0, #24
 800514a:	d501      	bpl.n	8005150 <_printf_i+0xec>
 800514c:	681e      	ldr	r6, [r3, #0]
 800514e:	e002      	b.n	8005156 <_printf_i+0xf2>
 8005150:	0646      	lsls	r6, r0, #25
 8005152:	d5fb      	bpl.n	800514c <_printf_i+0xe8>
 8005154:	881e      	ldrh	r6, [r3, #0]
 8005156:	4854      	ldr	r0, [pc, #336]	; (80052a8 <_printf_i+0x244>)
 8005158:	2f6f      	cmp	r7, #111	; 0x6f
 800515a:	bf0c      	ite	eq
 800515c:	2308      	moveq	r3, #8
 800515e:	230a      	movne	r3, #10
 8005160:	2100      	movs	r1, #0
 8005162:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005166:	6865      	ldr	r5, [r4, #4]
 8005168:	60a5      	str	r5, [r4, #8]
 800516a:	2d00      	cmp	r5, #0
 800516c:	bfa2      	ittt	ge
 800516e:	6821      	ldrge	r1, [r4, #0]
 8005170:	f021 0104 	bicge.w	r1, r1, #4
 8005174:	6021      	strge	r1, [r4, #0]
 8005176:	b90e      	cbnz	r6, 800517c <_printf_i+0x118>
 8005178:	2d00      	cmp	r5, #0
 800517a:	d04d      	beq.n	8005218 <_printf_i+0x1b4>
 800517c:	4615      	mov	r5, r2
 800517e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005182:	fb03 6711 	mls	r7, r3, r1, r6
 8005186:	5dc7      	ldrb	r7, [r0, r7]
 8005188:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800518c:	4637      	mov	r7, r6
 800518e:	42bb      	cmp	r3, r7
 8005190:	460e      	mov	r6, r1
 8005192:	d9f4      	bls.n	800517e <_printf_i+0x11a>
 8005194:	2b08      	cmp	r3, #8
 8005196:	d10b      	bne.n	80051b0 <_printf_i+0x14c>
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	07de      	lsls	r6, r3, #31
 800519c:	d508      	bpl.n	80051b0 <_printf_i+0x14c>
 800519e:	6923      	ldr	r3, [r4, #16]
 80051a0:	6861      	ldr	r1, [r4, #4]
 80051a2:	4299      	cmp	r1, r3
 80051a4:	bfde      	ittt	le
 80051a6:	2330      	movle	r3, #48	; 0x30
 80051a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051b0:	1b52      	subs	r2, r2, r5
 80051b2:	6122      	str	r2, [r4, #16]
 80051b4:	f8cd a000 	str.w	sl, [sp]
 80051b8:	464b      	mov	r3, r9
 80051ba:	aa03      	add	r2, sp, #12
 80051bc:	4621      	mov	r1, r4
 80051be:	4640      	mov	r0, r8
 80051c0:	f7ff fee2 	bl	8004f88 <_printf_common>
 80051c4:	3001      	adds	r0, #1
 80051c6:	d14c      	bne.n	8005262 <_printf_i+0x1fe>
 80051c8:	f04f 30ff 	mov.w	r0, #4294967295
 80051cc:	b004      	add	sp, #16
 80051ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d2:	4835      	ldr	r0, [pc, #212]	; (80052a8 <_printf_i+0x244>)
 80051d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80051d8:	6829      	ldr	r1, [r5, #0]
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80051e0:	6029      	str	r1, [r5, #0]
 80051e2:	061d      	lsls	r5, r3, #24
 80051e4:	d514      	bpl.n	8005210 <_printf_i+0x1ac>
 80051e6:	07df      	lsls	r7, r3, #31
 80051e8:	bf44      	itt	mi
 80051ea:	f043 0320 	orrmi.w	r3, r3, #32
 80051ee:	6023      	strmi	r3, [r4, #0]
 80051f0:	b91e      	cbnz	r6, 80051fa <_printf_i+0x196>
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	f023 0320 	bic.w	r3, r3, #32
 80051f8:	6023      	str	r3, [r4, #0]
 80051fa:	2310      	movs	r3, #16
 80051fc:	e7b0      	b.n	8005160 <_printf_i+0xfc>
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	f043 0320 	orr.w	r3, r3, #32
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	2378      	movs	r3, #120	; 0x78
 8005208:	4828      	ldr	r0, [pc, #160]	; (80052ac <_printf_i+0x248>)
 800520a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800520e:	e7e3      	b.n	80051d8 <_printf_i+0x174>
 8005210:	0659      	lsls	r1, r3, #25
 8005212:	bf48      	it	mi
 8005214:	b2b6      	uxthmi	r6, r6
 8005216:	e7e6      	b.n	80051e6 <_printf_i+0x182>
 8005218:	4615      	mov	r5, r2
 800521a:	e7bb      	b.n	8005194 <_printf_i+0x130>
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	6826      	ldr	r6, [r4, #0]
 8005220:	6961      	ldr	r1, [r4, #20]
 8005222:	1d18      	adds	r0, r3, #4
 8005224:	6028      	str	r0, [r5, #0]
 8005226:	0635      	lsls	r5, r6, #24
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	d501      	bpl.n	8005230 <_printf_i+0x1cc>
 800522c:	6019      	str	r1, [r3, #0]
 800522e:	e002      	b.n	8005236 <_printf_i+0x1d2>
 8005230:	0670      	lsls	r0, r6, #25
 8005232:	d5fb      	bpl.n	800522c <_printf_i+0x1c8>
 8005234:	8019      	strh	r1, [r3, #0]
 8005236:	2300      	movs	r3, #0
 8005238:	6123      	str	r3, [r4, #16]
 800523a:	4615      	mov	r5, r2
 800523c:	e7ba      	b.n	80051b4 <_printf_i+0x150>
 800523e:	682b      	ldr	r3, [r5, #0]
 8005240:	1d1a      	adds	r2, r3, #4
 8005242:	602a      	str	r2, [r5, #0]
 8005244:	681d      	ldr	r5, [r3, #0]
 8005246:	6862      	ldr	r2, [r4, #4]
 8005248:	2100      	movs	r1, #0
 800524a:	4628      	mov	r0, r5
 800524c:	f7fa ffc0 	bl	80001d0 <memchr>
 8005250:	b108      	cbz	r0, 8005256 <_printf_i+0x1f2>
 8005252:	1b40      	subs	r0, r0, r5
 8005254:	6060      	str	r0, [r4, #4]
 8005256:	6863      	ldr	r3, [r4, #4]
 8005258:	6123      	str	r3, [r4, #16]
 800525a:	2300      	movs	r3, #0
 800525c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005260:	e7a8      	b.n	80051b4 <_printf_i+0x150>
 8005262:	6923      	ldr	r3, [r4, #16]
 8005264:	462a      	mov	r2, r5
 8005266:	4649      	mov	r1, r9
 8005268:	4640      	mov	r0, r8
 800526a:	47d0      	blx	sl
 800526c:	3001      	adds	r0, #1
 800526e:	d0ab      	beq.n	80051c8 <_printf_i+0x164>
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	079b      	lsls	r3, r3, #30
 8005274:	d413      	bmi.n	800529e <_printf_i+0x23a>
 8005276:	68e0      	ldr	r0, [r4, #12]
 8005278:	9b03      	ldr	r3, [sp, #12]
 800527a:	4298      	cmp	r0, r3
 800527c:	bfb8      	it	lt
 800527e:	4618      	movlt	r0, r3
 8005280:	e7a4      	b.n	80051cc <_printf_i+0x168>
 8005282:	2301      	movs	r3, #1
 8005284:	4632      	mov	r2, r6
 8005286:	4649      	mov	r1, r9
 8005288:	4640      	mov	r0, r8
 800528a:	47d0      	blx	sl
 800528c:	3001      	adds	r0, #1
 800528e:	d09b      	beq.n	80051c8 <_printf_i+0x164>
 8005290:	3501      	adds	r5, #1
 8005292:	68e3      	ldr	r3, [r4, #12]
 8005294:	9903      	ldr	r1, [sp, #12]
 8005296:	1a5b      	subs	r3, r3, r1
 8005298:	42ab      	cmp	r3, r5
 800529a:	dcf2      	bgt.n	8005282 <_printf_i+0x21e>
 800529c:	e7eb      	b.n	8005276 <_printf_i+0x212>
 800529e:	2500      	movs	r5, #0
 80052a0:	f104 0619 	add.w	r6, r4, #25
 80052a4:	e7f5      	b.n	8005292 <_printf_i+0x22e>
 80052a6:	bf00      	nop
 80052a8:	0800549d 	.word	0x0800549d
 80052ac:	080054ae 	.word	0x080054ae

080052b0 <memmove>:
 80052b0:	4288      	cmp	r0, r1
 80052b2:	b510      	push	{r4, lr}
 80052b4:	eb01 0402 	add.w	r4, r1, r2
 80052b8:	d902      	bls.n	80052c0 <memmove+0x10>
 80052ba:	4284      	cmp	r4, r0
 80052bc:	4623      	mov	r3, r4
 80052be:	d807      	bhi.n	80052d0 <memmove+0x20>
 80052c0:	1e43      	subs	r3, r0, #1
 80052c2:	42a1      	cmp	r1, r4
 80052c4:	d008      	beq.n	80052d8 <memmove+0x28>
 80052c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052ce:	e7f8      	b.n	80052c2 <memmove+0x12>
 80052d0:	4402      	add	r2, r0
 80052d2:	4601      	mov	r1, r0
 80052d4:	428a      	cmp	r2, r1
 80052d6:	d100      	bne.n	80052da <memmove+0x2a>
 80052d8:	bd10      	pop	{r4, pc}
 80052da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052e2:	e7f7      	b.n	80052d4 <memmove+0x24>

080052e4 <_realloc_r>:
 80052e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052e8:	4680      	mov	r8, r0
 80052ea:	4614      	mov	r4, r2
 80052ec:	460e      	mov	r6, r1
 80052ee:	b921      	cbnz	r1, 80052fa <_realloc_r+0x16>
 80052f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052f4:	4611      	mov	r1, r2
 80052f6:	f7ff bb85 	b.w	8004a04 <_malloc_r>
 80052fa:	b92a      	cbnz	r2, 8005308 <_realloc_r+0x24>
 80052fc:	f7ff fc9c 	bl	8004c38 <_free_r>
 8005300:	4625      	mov	r5, r4
 8005302:	4628      	mov	r0, r5
 8005304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005308:	f000 f81b 	bl	8005342 <_malloc_usable_size_r>
 800530c:	4284      	cmp	r4, r0
 800530e:	4607      	mov	r7, r0
 8005310:	d802      	bhi.n	8005318 <_realloc_r+0x34>
 8005312:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005316:	d812      	bhi.n	800533e <_realloc_r+0x5a>
 8005318:	4621      	mov	r1, r4
 800531a:	4640      	mov	r0, r8
 800531c:	f7ff fb72 	bl	8004a04 <_malloc_r>
 8005320:	4605      	mov	r5, r0
 8005322:	2800      	cmp	r0, #0
 8005324:	d0ed      	beq.n	8005302 <_realloc_r+0x1e>
 8005326:	42bc      	cmp	r4, r7
 8005328:	4622      	mov	r2, r4
 800532a:	4631      	mov	r1, r6
 800532c:	bf28      	it	cs
 800532e:	463a      	movcs	r2, r7
 8005330:	f7ff fb32 	bl	8004998 <memcpy>
 8005334:	4631      	mov	r1, r6
 8005336:	4640      	mov	r0, r8
 8005338:	f7ff fc7e 	bl	8004c38 <_free_r>
 800533c:	e7e1      	b.n	8005302 <_realloc_r+0x1e>
 800533e:	4635      	mov	r5, r6
 8005340:	e7df      	b.n	8005302 <_realloc_r+0x1e>

08005342 <_malloc_usable_size_r>:
 8005342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005346:	1f18      	subs	r0, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	bfbc      	itt	lt
 800534c:	580b      	ldrlt	r3, [r1, r0]
 800534e:	18c0      	addlt	r0, r0, r3
 8005350:	4770      	bx	lr
	...

08005354 <_sbrk>:
 8005354:	4a04      	ldr	r2, [pc, #16]	; (8005368 <_sbrk+0x14>)
 8005356:	6811      	ldr	r1, [r2, #0]
 8005358:	4603      	mov	r3, r0
 800535a:	b909      	cbnz	r1, 8005360 <_sbrk+0xc>
 800535c:	4903      	ldr	r1, [pc, #12]	; (800536c <_sbrk+0x18>)
 800535e:	6011      	str	r1, [r2, #0]
 8005360:	6810      	ldr	r0, [r2, #0]
 8005362:	4403      	add	r3, r0
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	4770      	bx	lr
 8005368:	20001b38 	.word	0x20001b38
 800536c:	20001b40 	.word	0x20001b40

08005370 <_init>:
 8005370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005372:	bf00      	nop
 8005374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005376:	bc08      	pop	{r3}
 8005378:	469e      	mov	lr, r3
 800537a:	4770      	bx	lr

0800537c <_fini>:
 800537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537e:	bf00      	nop
 8005380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005382:	bc08      	pop	{r3}
 8005384:	469e      	mov	lr, r3
 8005386:	4770      	bx	lr
